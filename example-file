#[version = "0.0.5"]
/* another comment */
def @hi(%a: Tensor[(320, 320, 1, 64), int8], window=[2,2]) -> (Tensor[(40, 40, 4, 64), int8], Tensor[(20, 20, 4, 64), int8], Tensor[(80, 80, 4, 64), int8]){

}
def @hi(%a: Tensor[(320, 320, 1, 64), int8]/* ty=Tensor[(320, 320, 1, 64), int8] */, %b: Tensor[(320, 320, 1, 64), int8]/* ty=Tensor[(320, 320, 1, 64), int8] */) -> Tensor[(80, 80, 4, 64), int8]{%2 = a(); a()}
def @tvmgen_default_tvmgen_aipu_main_0(%aipu_0_i0: Tensor[(320, 320, 1, 64), int8] /* ty=Tensor[(320, 320, 1, 64), int8] */, Compiler="aipu", Primitive=1, global_symbol="tvmgen_default_tvmgen_aipu_main_0") -> (Tensor[(40, 40, 4, 64), int8], Tensor[(20, 20, 4, 64), int8], Tensor[(80, 80, 4, 64), int8]){%2 = a(); a()}

#[version = "0.0.5"]
def @tvmgen_default_tvmgen_aipu_main_0(%aipu_0_i0: Tensor[(320, 320, 1, 64), int8] /* ty=Tensor[(320, 320, 1, 64), int8] */, Compiler="aipu", Primitive=1, global_symbol="tvmgen_default_tvmgen_aipu_main_0") -> (Tensor[(40, 40, 4, 64), int8], Tensor[(20, 20, 4, 64), int8], Tensor[(80, 80, 4, 64), int8]) {
  %681 = fn (%OutlineComposites_0_i0: Tensor[(320, 320, 1, 64), int8] /* ty=Tensor[(320, 320, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_0") -> Tensor[(320, 320, 1, 64), int8] {
    %673 = contrib.axelera.ifd(%OutlineComposites_0_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(320, 320, 1, 3, 3, 64), int8] */;
    %674 = contrib.axelera.ifdw(meta[relay.Constant][263] /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */) /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */;
    %675 = contrib.axelera.mvm(%673, %674) /* ty=Tensor[(320, 320, 1, 1, 1, 64), int32] */;
    %676 = contrib.axelera.iau_reduce(%675, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(320, 320, 1, 1, 1, 64), int32] */;
    %677 = contrib.axelera.dpu_cast_float32(%676) /* ty=Tensor[(320, 320, 1, 1, 1, 64), float32] */;
    %678 = contrib.axelera.dpu_elementwise(%677, meta[relay.Constant][264] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(320, 320, 1, 1, 1, 64), float32] */;
    %679 = contrib.axelera.dpu_elementwise(%678, meta[relay.Constant][265] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(320, 320, 1, 1, 1, 64), float32] */;
    %680 = cast(%679, dtype="int8") /* ty=Tensor[(320, 320, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%680, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(320, 320, 1, 64), int8] */
  } /* ty=fn (Tensor[(320, 320, 1, 64), int8]) -> Tensor[(320, 320, 1, 64), int8] */;
  %682 = %681(%aipu_0_i0) /* ty=Tensor[(320, 320, 1, 64), int8] */;
  %683 = fn (%OutlineComposites_4_i0: Tensor[(320, 320, 1, 64), int8] /* ty=Tensor[(320, 320, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_4") -> Tensor[(160, 160, 1, 64), int8] {
    %665 = contrib.axelera.ifd(%OutlineComposites_4_i0, window_hw=[3, 3], strides=[2, 2], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(160, 160, 1, 3, 3, 64), int8] */;
    %666 = contrib.axelera.ifdw(meta[relay.Constant][260] /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */) /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */;
    %667 = contrib.axelera.mvm(%665, %666) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %668 = contrib.axelera.iau_reduce(%667, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %669 = contrib.axelera.dpu_cast_float32(%668) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %670 = contrib.axelera.dpu_elementwise(%669, meta[relay.Constant][261] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %671 = contrib.axelera.dpu_elementwise(%670, meta[relay.Constant][262] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %672 = cast(%671, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%672, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(320, 320, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %684 = %683(%682) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %685 = fn (%OutlineComposites_8_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_8") -> Tensor[(160, 160, 1, 64), int8] {
    %657 = contrib.axelera.ifd(%OutlineComposites_8_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %658 = contrib.axelera.ifdw(meta[relay.Constant][257] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %659 = contrib.axelera.mvm(%657, %658) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %660 = contrib.axelera.iau_reduce(%659, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %661 = contrib.axelera.dpu_cast_float32(%660) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %662 = contrib.axelera.dpu_elementwise(%661, meta[relay.Constant][258] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %663 = contrib.axelera.dpu_elementwise(%662, meta[relay.Constant][259] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %664 = cast(%663, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%664, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %686 = %685(%684) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %687 = fn (%OutlineComposites_12_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_12") -> Tensor[(160, 160, 1, 64), int8] {
    %649 = contrib.axelera.ifd(%OutlineComposites_12_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %650 = contrib.axelera.ifdw(meta[relay.Constant][254] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %651 = contrib.axelera.mvm(%649, %650) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %652 = contrib.axelera.iau_reduce(%651, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %653 = contrib.axelera.dpu_cast_float32(%652) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %654 = contrib.axelera.dpu_elementwise(%653, meta[relay.Constant][255] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %655 = contrib.axelera.dpu_elementwise(%654, meta[relay.Constant][256] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %656 = cast(%655, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%656, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %688 = %687(%686) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %689 = fn (%OutlineComposites_16_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, %OutlineComposites_16_i6: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_16") -> Tensor[(160, 160, 1, 64), int8] {
    %633 = contrib.axelera.ifd(%OutlineComposites_16_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(160, 160, 1, 3, 3, 64), int8] */;
    %634 = contrib.axelera.ifdw(meta[relay.Constant][245] /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */) /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */;
    %635 = contrib.axelera.mvm(%633, %634) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %636 = contrib.axelera.iau_reduce(%635, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %637 = contrib.axelera.dpu_cast_float32(%636) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %638 = contrib.axelera.dpu_elementwise(%637, meta[relay.Constant][246] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %639 = contrib.axelera.dpu_elementwise(%638, meta[relay.Constant][247] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %640 = contrib.axelera.ifd(%OutlineComposites_16_i6, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %641 = contrib.axelera.dpu_cast_float32(%640) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %642 = contrib.axelera.dpu_elementwise(%641, meta[relay.Constant][250] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %643 = contrib.axelera.dpu_prelu(%639, meta[relay.Constant][248] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, meta[relay.Constant][249] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %644 = contrib.axelera.dpu_elementwise(%642, meta[relay.Constant][251] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %645 = contrib.axelera.dpu_elementwise(%643, %644, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %646 = contrib.axelera.dpu_elementwise(%645, meta[relay.Constant][252] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %647 = contrib.axelera.dpu_elementwise(%646, meta[relay.Constant][253] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %648 = cast(%647, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%648, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8], Tensor[(160, 160, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %690 = %689(%688, %686) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %691 = fn (%OutlineComposites_27_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_27") -> Tensor[(160, 160, 1, 64), int8] {
    %625 = contrib.axelera.ifd(%OutlineComposites_27_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %626 = contrib.axelera.ifdw(meta[relay.Constant][242] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %627 = contrib.axelera.mvm(%625, %626) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %628 = contrib.axelera.iau_reduce(%627, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %629 = contrib.axelera.dpu_cast_float32(%628) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %630 = contrib.axelera.dpu_elementwise(%629, meta[relay.Constant][243] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %631 = contrib.axelera.dpu_elementwise(%630, meta[relay.Constant][244] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %632 = cast(%631, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%632, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %707 = fn (%OutlineComposites_33_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_33") -> Tensor[(160, 160, 1, 64), int8] {
    %699 = contrib.axelera.ifd(%OutlineComposites_33_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %700 = contrib.axelera.ifdw(meta[relay.Constant][268] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %701 = contrib.axelera.mvm(%699, %700) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %702 = contrib.axelera.iau_reduce(%701, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %703 = contrib.axelera.dpu_cast_float32(%702) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %704 = contrib.axelera.dpu_elementwise(%703, meta[relay.Constant][269] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %705 = contrib.axelera.dpu_elementwise(%704, meta[relay.Constant][270] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %706 = cast(%705, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%706, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %708 = %707(%684) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %709 = fn (%OutlineComposites_37_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_37") -> Tensor[(160, 160, 1, 64), int8] {
    %692 = contrib.axelera.ifd(%OutlineComposites_37_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %693 = contrib.axelera.mvm_bypass(%692) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %694 = contrib.axelera.iau_reduce(%693, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %695 = contrib.axelera.dpu_cast_float32(%694) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %696 = contrib.axelera.dpu_elementwise(%695, meta[relay.Constant][266] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %697 = contrib.axelera.dpu_elementwise(%696, meta[relay.Constant][267] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %698 = cast(%697, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%698, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %710 = %691(%690) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %711 = %709(%708) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %712 = fn (%OutlineComposites_31_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, %OutlineComposites_31_i2: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_31") -> Tensor[(160, 160, 1, 64), int8] {
    %613 = contrib.axelera.ifd(%OutlineComposites_31_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %614 = contrib.axelera.dpu_cast_float32(%613) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %615 = contrib.axelera.ifd(%OutlineComposites_31_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %616 = contrib.axelera.ifdw(meta[relay.Constant][239] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %617 = contrib.axelera.mvm(%615, %616) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %618 = contrib.axelera.iau_reduce(%617, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %619 = contrib.axelera.dpu_cast_float32(%618) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %620 = contrib.axelera.dpu_elementwise(%619, meta[relay.Constant][240] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %621 = contrib.axelera.dpu_elementwise(%614, meta[relay.Constant][238] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %622 = contrib.axelera.dpu_elementwise(%620, meta[relay.Constant][241] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %623 = contrib.axelera.dpu_elementwise(%621, %622, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %624 = cast(%623, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%624, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8], Tensor[(160, 160, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %713 = %712(%710, %711) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %714 = fn (%OutlineComposites_44_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_44") -> Tensor[(160, 160, 1, 64), int8] {
    %605 = contrib.axelera.ifd(%OutlineComposites_44_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    %606 = contrib.axelera.ifdw(meta[relay.Constant][235] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %607 = contrib.axelera.mvm(%605, %606) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %608 = contrib.axelera.iau_reduce(%607, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(160, 160, 1, 1, 1, 64), int32] */;
    %609 = contrib.axelera.dpu_cast_float32(%608) /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %610 = contrib.axelera.dpu_elementwise(%609, meta[relay.Constant][236] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %611 = contrib.axelera.dpu_elementwise(%610, meta[relay.Constant][237] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(160, 160, 1, 1, 1, 64), float32] */;
    %612 = cast(%611, dtype="int8") /* ty=Tensor[(160, 160, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%612, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(160, 160, 1, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8]) -> Tensor[(160, 160, 1, 64), int8] */;
  %715 = %714(%713) /* ty=Tensor[(160, 160, 1, 64), int8] */;
  %716 = fn (%OutlineComposites_48_i0: Tensor[(160, 160, 1, 64), int8] /* ty=Tensor[(160, 160, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_48") -> Tensor[(80, 80, 2, 64), int8] {
    %597 = contrib.axelera.ifd(%OutlineComposites_48_i0, window_hw=[3, 3], strides=[2, 2], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(80, 80, 1, 3, 3, 64), int8] */;
    %598 = contrib.axelera.ifdw(meta[relay.Constant][232] /* ty=Tensor[(2, 1, 3, 3, 64, 64), int8] */) /* ty=Tensor[(2, 1, 3, 3, 64, 64), int8] */;
    %599 = contrib.axelera.mvm(%597, %598) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %600 = contrib.axelera.iau_reduce(%599, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %601 = contrib.axelera.dpu_cast_float32(%600) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %602 = contrib.axelera.dpu_elementwise(%601, meta[relay.Constant][233] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %603 = contrib.axelera.dpu_elementwise(%602, meta[relay.Constant][234] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %604 = cast(%603, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%604, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(160, 160, 1, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %717 = %716(%715) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %718 = fn (%OutlineComposites_52_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_52") -> Tensor[(80, 80, 1, 64), int8] {
    %589 = contrib.axelera.ifd(%OutlineComposites_52_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %590 = contrib.axelera.ifdw(meta[relay.Constant][229] /* ty=Tensor[(1, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 2, 1, 1, 64, 64), int8] */;
    %591 = contrib.axelera.mvm(%589, %590) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %592 = contrib.axelera.iau_reduce(%591, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %593 = contrib.axelera.dpu_cast_float32(%592) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %594 = contrib.axelera.dpu_elementwise(%593, meta[relay.Constant][230] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %595 = contrib.axelera.dpu_elementwise(%594, meta[relay.Constant][231] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %596 = cast(%595, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%596, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %719 = %718(%717) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %720 = fn (%OutlineComposites_56_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_56") -> Tensor[(80, 80, 1, 64), int8] {
    %581 = contrib.axelera.ifd(%OutlineComposites_56_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %582 = contrib.axelera.ifdw(meta[relay.Constant][226] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %583 = contrib.axelera.mvm(%581, %582) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %584 = contrib.axelera.iau_reduce(%583, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %585 = contrib.axelera.dpu_cast_float32(%584) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %586 = contrib.axelera.dpu_elementwise(%585, meta[relay.Constant][227] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %587 = contrib.axelera.dpu_elementwise(%586, meta[relay.Constant][228] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %588 = cast(%587, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%588, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %721 = %720(%719) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %722 = fn (%OutlineComposites_60_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, %OutlineComposites_60_i6: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_60") -> Tensor[(80, 80, 1, 64), int8] {
    %565 = contrib.axelera.ifd(%OutlineComposites_60_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(80, 80, 1, 3, 3, 64), int8] */;
    %566 = contrib.axelera.ifdw(meta[relay.Constant][217] /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */) /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */;
    %567 = contrib.axelera.mvm(%565, %566) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %568 = contrib.axelera.iau_reduce(%567, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %569 = contrib.axelera.dpu_cast_float32(%568) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %570 = contrib.axelera.dpu_elementwise(%569, meta[relay.Constant][218] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %571 = contrib.axelera.dpu_elementwise(%570, meta[relay.Constant][219] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %572 = contrib.axelera.ifd(%OutlineComposites_60_i6, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %573 = contrib.axelera.dpu_cast_float32(%572) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %574 = contrib.axelera.dpu_elementwise(%573, meta[relay.Constant][222] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %575 = contrib.axelera.dpu_prelu(%571, meta[relay.Constant][220] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, meta[relay.Constant][221] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %576 = contrib.axelera.dpu_elementwise(%574, meta[relay.Constant][223] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %577 = contrib.axelera.dpu_elementwise(%575, %576, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %578 = contrib.axelera.dpu_elementwise(%577, meta[relay.Constant][224] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %579 = contrib.axelera.dpu_elementwise(%578, meta[relay.Constant][225] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %580 = cast(%579, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%580, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8], Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %723 = %722(%721, %719) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %724 = fn (%OutlineComposites_71_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_71") -> Tensor[(80, 80, 1, 64), int8] {
    %557 = contrib.axelera.ifd(%OutlineComposites_71_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %558 = contrib.axelera.ifdw(meta[relay.Constant][214] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %559 = contrib.axelera.mvm(%557, %558) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %560 = contrib.axelera.iau_reduce(%559, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %561 = contrib.axelera.dpu_cast_float32(%560) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %562 = contrib.axelera.dpu_elementwise(%561, meta[relay.Constant][215] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %563 = contrib.axelera.dpu_elementwise(%562, meta[relay.Constant][216] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %564 = cast(%563, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%564, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %725 = %724(%723) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %726 = fn (%OutlineComposites_75_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, %OutlineComposites_75_i6: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_75") -> Tensor[(80, 80, 1, 64), int8] {
    %541 = contrib.axelera.ifd(%OutlineComposites_75_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(80, 80, 1, 3, 3, 64), int8] */;
    %542 = contrib.axelera.ifdw(meta[relay.Constant][205] /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */) /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */;
    %543 = contrib.axelera.mvm(%541, %542) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %544 = contrib.axelera.iau_reduce(%543, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %545 = contrib.axelera.dpu_cast_float32(%544) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %546 = contrib.axelera.dpu_elementwise(%545, meta[relay.Constant][206] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %547 = contrib.axelera.dpu_elementwise(%546, meta[relay.Constant][207] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %548 = contrib.axelera.ifd(%OutlineComposites_75_i6, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %549 = contrib.axelera.dpu_cast_float32(%548) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %550 = contrib.axelera.dpu_elementwise(%549, meta[relay.Constant][210] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %551 = contrib.axelera.dpu_prelu(%547, meta[relay.Constant][208] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, meta[relay.Constant][209] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %552 = contrib.axelera.dpu_elementwise(%550, meta[relay.Constant][211] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %553 = contrib.axelera.dpu_elementwise(%551, %552, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %554 = contrib.axelera.dpu_elementwise(%553, meta[relay.Constant][212] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %555 = contrib.axelera.dpu_elementwise(%554, meta[relay.Constant][213] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %556 = cast(%555, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%556, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8], Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %727 = %726(%725, %723) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %728 = fn (%OutlineComposites_86_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_86") -> Tensor[(80, 80, 1, 64), int8] {
    %533 = contrib.axelera.ifd(%OutlineComposites_86_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %534 = contrib.axelera.ifdw(meta[relay.Constant][202] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %535 = contrib.axelera.mvm(%533, %534) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %536 = contrib.axelera.iau_reduce(%535, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %537 = contrib.axelera.dpu_cast_float32(%536) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %538 = contrib.axelera.dpu_elementwise(%537, meta[relay.Constant][203] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %539 = contrib.axelera.dpu_elementwise(%538, meta[relay.Constant][204] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %540 = cast(%539, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%540, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %729 = %728(%727) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %730 = fn (%OutlineComposites_90_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, %OutlineComposites_90_i6: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_90") -> Tensor[(80, 80, 1, 64), int8] {
    %517 = contrib.axelera.ifd(%OutlineComposites_90_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(80, 80, 1, 3, 3, 64), int8] */;
    %518 = contrib.axelera.ifdw(meta[relay.Constant][193] /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */) /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */;
    %519 = contrib.axelera.mvm(%517, %518) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %520 = contrib.axelera.iau_reduce(%519, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %521 = contrib.axelera.dpu_cast_float32(%520) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %522 = contrib.axelera.dpu_elementwise(%521, meta[relay.Constant][194] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %523 = contrib.axelera.dpu_elementwise(%522, meta[relay.Constant][195] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %524 = contrib.axelera.ifd(%OutlineComposites_90_i6, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %525 = contrib.axelera.dpu_cast_float32(%524) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %526 = contrib.axelera.dpu_elementwise(%525, meta[relay.Constant][198] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %527 = contrib.axelera.dpu_prelu(%523, meta[relay.Constant][196] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, meta[relay.Constant][197] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %528 = contrib.axelera.dpu_elementwise(%526, meta[relay.Constant][199] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %529 = contrib.axelera.dpu_elementwise(%527, %528, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %530 = contrib.axelera.dpu_elementwise(%529, meta[relay.Constant][200] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %531 = contrib.axelera.dpu_elementwise(%530, meta[relay.Constant][201] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %532 = cast(%531, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%532, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8], Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %731 = %730(%729, %727) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %732 = fn (%OutlineComposites_101_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_101") -> Tensor[(80, 80, 2, 64), int8] {
    %509 = contrib.axelera.ifd(%OutlineComposites_101_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %510 = contrib.axelera.ifdw(meta[relay.Constant][190] /* ty=Tensor[(2, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 1, 1, 1, 64, 64), int8] */;
    %511 = contrib.axelera.mvm(%509, %510) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %512 = contrib.axelera.iau_reduce(%511, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %513 = contrib.axelera.dpu_cast_float32(%512) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %514 = contrib.axelera.dpu_elementwise(%513, meta[relay.Constant][191] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %515 = contrib.axelera.dpu_elementwise(%514, meta[relay.Constant][192] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %516 = cast(%515, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%516, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %748 = fn (%OutlineComposites_107_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_107") -> Tensor[(80, 80, 1, 64), int8] {
    %740 = contrib.axelera.ifd(%OutlineComposites_107_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %741 = contrib.axelera.ifdw(meta[relay.Constant][273] /* ty=Tensor[(1, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 2, 1, 1, 64, 64), int8] */;
    %742 = contrib.axelera.mvm(%740, %741) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %743 = contrib.axelera.iau_reduce(%742, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %744 = contrib.axelera.dpu_cast_float32(%743) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %745 = contrib.axelera.dpu_elementwise(%744, meta[relay.Constant][274] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %746 = contrib.axelera.dpu_elementwise(%745, meta[relay.Constant][275] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %747 = cast(%746, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%747, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %749 = %748(%717) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %750 = fn (%OutlineComposites_111_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_111") -> Tensor[(80, 80, 1, 64), int8] {
    %733 = contrib.axelera.ifd(%OutlineComposites_111_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %734 = contrib.axelera.mvm_bypass(%733) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %735 = contrib.axelera.iau_reduce(%734, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %736 = contrib.axelera.dpu_cast_float32(%735) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %737 = contrib.axelera.dpu_elementwise(%736, meta[relay.Constant][271] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %738 = contrib.axelera.dpu_elementwise(%737, meta[relay.Constant][272] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %739 = cast(%738, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%739, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %751 = %732(%731) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %752 = %750(%749) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %753 = fn (%OutlineComposites_105_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, %OutlineComposites_105_i2: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_105") -> Tensor[(80, 80, 2, 64), int8] {
    %497 = contrib.axelera.ifd(%OutlineComposites_105_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %498 = contrib.axelera.dpu_cast_float32(%497) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %499 = contrib.axelera.ifd(%OutlineComposites_105_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %500 = contrib.axelera.ifdw(meta[relay.Constant][187] /* ty=Tensor[(2, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 1, 1, 1, 64, 64), int8] */;
    %501 = contrib.axelera.mvm(%499, %500) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %502 = contrib.axelera.iau_reduce(%501, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %503 = contrib.axelera.dpu_cast_float32(%502) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %504 = contrib.axelera.dpu_elementwise(%503, meta[relay.Constant][188] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %505 = contrib.axelera.dpu_elementwise(%498, meta[relay.Constant][186] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %506 = contrib.axelera.dpu_elementwise(%504, meta[relay.Constant][189] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %507 = contrib.axelera.dpu_elementwise(%505, %506, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %508 = cast(%507, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%508, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8], Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %754 = %753(%751, %752) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %755 = fn (%OutlineComposites_118_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_118") -> Tensor[(80, 80, 2, 64), int8] {
    %489 = contrib.axelera.ifd(%OutlineComposites_118_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %490 = contrib.axelera.ifdw(meta[relay.Constant][183] /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */;
    %491 = contrib.axelera.mvm(%489, %490) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %492 = contrib.axelera.iau_reduce(%491, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %493 = contrib.axelera.dpu_cast_float32(%492) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %494 = contrib.axelera.dpu_elementwise(%493, meta[relay.Constant][184] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %495 = contrib.axelera.dpu_elementwise(%494, meta[relay.Constant][185] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %496 = cast(%495, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%496, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %756 = %755(%754) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %757 = fn (%OutlineComposites_122_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_122") -> Tensor[(40, 40, 4, 64), int8] {
    %481 = contrib.axelera.ifd(%OutlineComposites_122_i0, window_hw=[3, 3], strides=[2, 2], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(40, 40, 2, 3, 3, 64), int8] */;
    %482 = contrib.axelera.ifdw(meta[relay.Constant][180] /* ty=Tensor[(4, 2, 3, 3, 64, 64), int8] */) /* ty=Tensor[(4, 2, 3, 3, 64, 64), int8] */;
    %483 = contrib.axelera.mvm(%481, %482) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %484 = contrib.axelera.iau_reduce(%483, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %485 = contrib.axelera.dpu_cast_float32(%484) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %486 = contrib.axelera.dpu_elementwise(%485, meta[relay.Constant][181] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %487 = contrib.axelera.dpu_elementwise(%486, meta[relay.Constant][182] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %488 = cast(%487, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%488, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %758 = %757(%756) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %759 = fn (%OutlineComposites_126_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_126") -> Tensor[(40, 40, 2, 64), int8] {
    %473 = contrib.axelera.ifd(%OutlineComposites_126_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %474 = contrib.axelera.ifdw(meta[relay.Constant][177] /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */;
    %475 = contrib.axelera.mvm(%473, %474) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %476 = contrib.axelera.iau_reduce(%475, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %477 = contrib.axelera.dpu_cast_float32(%476) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %478 = contrib.axelera.dpu_elementwise(%477, meta[relay.Constant][178] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %479 = contrib.axelera.dpu_elementwise(%478, meta[relay.Constant][179] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %480 = cast(%479, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%480, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %760 = %759(%758) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %761 = fn (%OutlineComposites_130_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_130") -> Tensor[(40, 40, 2, 64), int8] {
    %465 = contrib.axelera.ifd(%OutlineComposites_130_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %466 = contrib.axelera.ifdw(meta[relay.Constant][174] /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */;
    %467 = contrib.axelera.mvm(%465, %466) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %468 = contrib.axelera.iau_reduce(%467, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %469 = contrib.axelera.dpu_cast_float32(%468) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %470 = contrib.axelera.dpu_elementwise(%469, meta[relay.Constant][175] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %471 = contrib.axelera.dpu_elementwise(%470, meta[relay.Constant][176] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %472 = cast(%471, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%472, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %762 = %761(%760) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %763 = fn (%OutlineComposites_134_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, %OutlineComposites_134_i6: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_134") -> Tensor[(40, 40, 2, 64), int8] {
    %449 = contrib.axelera.ifd(%OutlineComposites_134_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(40, 40, 2, 3, 3, 64), int8] */;
    %450 = contrib.axelera.ifdw(meta[relay.Constant][165] /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */) /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */;
    %451 = contrib.axelera.mvm(%449, %450) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %452 = contrib.axelera.iau_reduce(%451, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %453 = contrib.axelera.dpu_cast_float32(%452) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %454 = contrib.axelera.dpu_elementwise(%453, meta[relay.Constant][166] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %455 = contrib.axelera.dpu_elementwise(%454, meta[relay.Constant][167] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %456 = contrib.axelera.ifd(%OutlineComposites_134_i6, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %457 = contrib.axelera.dpu_cast_float32(%456) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %458 = contrib.axelera.dpu_elementwise(%457, meta[relay.Constant][170] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %459 = contrib.axelera.dpu_prelu(%455, meta[relay.Constant][168] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, meta[relay.Constant][169] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %460 = contrib.axelera.dpu_elementwise(%458, meta[relay.Constant][171] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %461 = contrib.axelera.dpu_elementwise(%459, %460, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %462 = contrib.axelera.dpu_elementwise(%461, meta[relay.Constant][172] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %463 = contrib.axelera.dpu_elementwise(%462, meta[relay.Constant][173] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %464 = cast(%463, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%464, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8], Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %764 = %763(%762, %760) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %765 = fn (%OutlineComposites_145_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_145") -> Tensor[(40, 40, 2, 64), int8] {
    %441 = contrib.axelera.ifd(%OutlineComposites_145_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %442 = contrib.axelera.ifdw(meta[relay.Constant][162] /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */;
    %443 = contrib.axelera.mvm(%441, %442) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %444 = contrib.axelera.iau_reduce(%443, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %445 = contrib.axelera.dpu_cast_float32(%444) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %446 = contrib.axelera.dpu_elementwise(%445, meta[relay.Constant][163] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %447 = contrib.axelera.dpu_elementwise(%446, meta[relay.Constant][164] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %448 = cast(%447, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%448, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %766 = %765(%764) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %767 = fn (%OutlineComposites_149_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, %OutlineComposites_149_i6: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_149") -> Tensor[(40, 40, 2, 64), int8] {
    %425 = contrib.axelera.ifd(%OutlineComposites_149_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(40, 40, 2, 3, 3, 64), int8] */;
    %426 = contrib.axelera.ifdw(meta[relay.Constant][153] /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */) /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */;
    %427 = contrib.axelera.mvm(%425, %426) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %428 = contrib.axelera.iau_reduce(%427, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %429 = contrib.axelera.dpu_cast_float32(%428) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %430 = contrib.axelera.dpu_elementwise(%429, meta[relay.Constant][154] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %431 = contrib.axelera.dpu_elementwise(%430, meta[relay.Constant][155] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %432 = contrib.axelera.ifd(%OutlineComposites_149_i6, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %433 = contrib.axelera.dpu_cast_float32(%432) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %434 = contrib.axelera.dpu_elementwise(%433, meta[relay.Constant][158] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %435 = contrib.axelera.dpu_prelu(%431, meta[relay.Constant][156] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, meta[relay.Constant][157] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %436 = contrib.axelera.dpu_elementwise(%434, meta[relay.Constant][159] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %437 = contrib.axelera.dpu_elementwise(%435, %436, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %438 = contrib.axelera.dpu_elementwise(%437, meta[relay.Constant][160] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %439 = contrib.axelera.dpu_elementwise(%438, meta[relay.Constant][161] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %440 = cast(%439, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%440, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8], Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %768 = %767(%766, %764) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %769 = fn (%OutlineComposites_160_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_160") -> Tensor[(40, 40, 2, 64), int8] {
    %417 = contrib.axelera.ifd(%OutlineComposites_160_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %418 = contrib.axelera.ifdw(meta[relay.Constant][150] /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */;
    %419 = contrib.axelera.mvm(%417, %418) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %420 = contrib.axelera.iau_reduce(%419, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %421 = contrib.axelera.dpu_cast_float32(%420) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %422 = contrib.axelera.dpu_elementwise(%421, meta[relay.Constant][151] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %423 = contrib.axelera.dpu_elementwise(%422, meta[relay.Constant][152] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %424 = cast(%423, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%424, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %770 = %769(%768) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %771 = fn (%OutlineComposites_164_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, %OutlineComposites_164_i6: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_164") -> Tensor[(40, 40, 2, 64), int8] {
    %401 = contrib.axelera.ifd(%OutlineComposites_164_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(40, 40, 2, 3, 3, 64), int8] */;
    %402 = contrib.axelera.ifdw(meta[relay.Constant][141] /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */) /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */;
    %403 = contrib.axelera.mvm(%401, %402) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %404 = contrib.axelera.iau_reduce(%403, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %405 = contrib.axelera.dpu_cast_float32(%404) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %406 = contrib.axelera.dpu_elementwise(%405, meta[relay.Constant][142] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %407 = contrib.axelera.dpu_elementwise(%406, meta[relay.Constant][143] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %408 = contrib.axelera.ifd(%OutlineComposites_164_i6, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %409 = contrib.axelera.dpu_cast_float32(%408) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %410 = contrib.axelera.dpu_elementwise(%409, meta[relay.Constant][146] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %411 = contrib.axelera.dpu_prelu(%407, meta[relay.Constant][144] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, meta[relay.Constant][145] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %412 = contrib.axelera.dpu_elementwise(%410, meta[relay.Constant][147] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %413 = contrib.axelera.dpu_elementwise(%411, %412, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %414 = contrib.axelera.dpu_elementwise(%413, meta[relay.Constant][148] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %415 = contrib.axelera.dpu_elementwise(%414, meta[relay.Constant][149] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %416 = cast(%415, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%416, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8], Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %772 = %771(%770, %768) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %773 = fn (%OutlineComposites_175_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_175") -> Tensor[(40, 40, 4, 64), int8] {
    %393 = contrib.axelera.ifd(%OutlineComposites_175_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %394 = contrib.axelera.ifdw(meta[relay.Constant][138] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %395 = contrib.axelera.mvm(%393, %394) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %396 = contrib.axelera.iau_reduce(%395, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %397 = contrib.axelera.dpu_cast_float32(%396) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %398 = contrib.axelera.dpu_elementwise(%397, meta[relay.Constant][139] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %399 = contrib.axelera.dpu_elementwise(%398, meta[relay.Constant][140] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %400 = cast(%399, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%400, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %789 = fn (%OutlineComposites_181_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_181") -> Tensor[(40, 40, 2, 64), int8] {
    %781 = contrib.axelera.ifd(%OutlineComposites_181_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %782 = contrib.axelera.ifdw(meta[relay.Constant][278] /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */;
    %783 = contrib.axelera.mvm(%781, %782) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %784 = contrib.axelera.iau_reduce(%783, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %785 = contrib.axelera.dpu_cast_float32(%784) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %786 = contrib.axelera.dpu_elementwise(%785, meta[relay.Constant][279] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %787 = contrib.axelera.dpu_elementwise(%786, meta[relay.Constant][280] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %788 = cast(%787, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%788, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %790 = %789(%758) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %791 = fn (%OutlineComposites_185_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_185") -> Tensor[(40, 40, 2, 64), int8] {
    %774 = contrib.axelera.ifd(%OutlineComposites_185_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %775 = contrib.axelera.mvm_bypass(%774) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %776 = contrib.axelera.iau_reduce(%775, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %777 = contrib.axelera.dpu_cast_float32(%776) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %778 = contrib.axelera.dpu_elementwise(%777, meta[relay.Constant][276] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %779 = contrib.axelera.dpu_elementwise(%778, meta[relay.Constant][277] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %780 = cast(%779, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%780, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %792 = %773(%772) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %793 = %791(%790) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %794 = fn (%OutlineComposites_179_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, %OutlineComposites_179_i2: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_179") -> Tensor[(40, 40, 4, 64), int8] {
    %381 = contrib.axelera.ifd(%OutlineComposites_179_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %382 = contrib.axelera.dpu_cast_float32(%381) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %383 = contrib.axelera.ifd(%OutlineComposites_179_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %384 = contrib.axelera.ifdw(meta[relay.Constant][135] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %385 = contrib.axelera.mvm(%383, %384) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %386 = contrib.axelera.iau_reduce(%385, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %387 = contrib.axelera.dpu_cast_float32(%386) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %388 = contrib.axelera.dpu_elementwise(%387, meta[relay.Constant][136] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %389 = contrib.axelera.dpu_elementwise(%382, meta[relay.Constant][134] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %390 = contrib.axelera.dpu_elementwise(%388, meta[relay.Constant][137] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %391 = contrib.axelera.dpu_elementwise(%389, %390, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %392 = cast(%391, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%392, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8], Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %795 = %794(%792, %793) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %796 = fn (%OutlineComposites_192_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_192") -> Tensor[(40, 40, 4, 64), int8] {
    %373 = contrib.axelera.ifd(%OutlineComposites_192_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %374 = contrib.axelera.ifdw(meta[relay.Constant][131] /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */;
    %375 = contrib.axelera.mvm(%373, %374) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %376 = contrib.axelera.iau_reduce(%375, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %377 = contrib.axelera.dpu_cast_float32(%376) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %378 = contrib.axelera.dpu_elementwise(%377, meta[relay.Constant][132] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %379 = contrib.axelera.dpu_elementwise(%378, meta[relay.Constant][133] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %380 = cast(%379, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%380, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %797 = %796(%795) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %798 = fn (%OutlineComposites_196_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_196") -> Tensor[(20, 20, 8, 64), int8] {
    %365 = contrib.axelera.ifd(%OutlineComposites_196_i0, window_hw=[3, 3], strides=[2, 2], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(20, 20, 4, 3, 3, 64), int8] */;
    %366 = contrib.axelera.ifdw(meta[relay.Constant][128] /* ty=Tensor[(8, 4, 3, 3, 64, 64), int8] */) /* ty=Tensor[(8, 4, 3, 3, 64, 64), int8] */;
    %367 = contrib.axelera.mvm(%365, %366) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %368 = contrib.axelera.iau_reduce(%367, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %369 = contrib.axelera.dpu_cast_float32(%368) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %370 = contrib.axelera.dpu_elementwise(%369, meta[relay.Constant][129] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %371 = contrib.axelera.dpu_elementwise(%370, meta[relay.Constant][130] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %372 = cast(%371, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%372, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %799 = %798(%797) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %800 = fn (%OutlineComposites_200_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_200") -> Tensor[(20, 20, 4, 64), int8] {
    %357 = contrib.axelera.ifd(%OutlineComposites_200_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %358 = contrib.axelera.ifdw(meta[relay.Constant][125] /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */;
    %359 = contrib.axelera.mvm(%357, %358) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %360 = contrib.axelera.iau_reduce(%359, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %361 = contrib.axelera.dpu_cast_float32(%360) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %362 = contrib.axelera.dpu_elementwise(%361, meta[relay.Constant][126] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %363 = contrib.axelera.dpu_elementwise(%362, meta[relay.Constant][127] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %364 = cast(%363, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%364, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %801 = %800(%799) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %802 = fn (%OutlineComposites_204_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_204") -> Tensor[(20, 20, 4, 64), int8] {
    %350 = contrib.axelera.ifd(%OutlineComposites_204_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %351 = contrib.axelera.mvm_bypass(%350) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %352 = contrib.axelera.iau_reduce(%351, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %353 = contrib.axelera.dpu_cast_float32(%352) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %354 = contrib.axelera.dpu_elementwise(%353, meta[relay.Constant][123] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %355 = contrib.axelera.dpu_elementwise(%354, meta[relay.Constant][124] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %356 = cast(%355, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%356, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %803 = %802(%801) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %804 = fn (%OutlineComposites_207_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_207") -> Tensor[(20, 20, 16, 64), int8] {
    %342 = contrib.axelera.ifd(%OutlineComposites_207_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %343 = contrib.axelera.ifdw(meta[relay.Constant][120] /* ty=Tensor[(16, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(16, 4, 1, 1, 64, 64), int8] */;
    %344 = contrib.axelera.mvm(%342, %343) /* ty=Tensor[(20, 20, 16, 1, 1, 64), int32] */;
    %345 = contrib.axelera.iau_reduce(%344, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 16, 1, 1, 64), int32] */;
    %346 = contrib.axelera.dpu_cast_float32(%345) /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %347 = contrib.axelera.dpu_elementwise(%346, meta[relay.Constant][121] /* ty=Tensor[(1, 1, 16, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %348 = contrib.axelera.dpu_elementwise(%347, meta[relay.Constant][122] /* ty=Tensor[(1, 1, 16, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %349 = cast(%348, dtype="int8") /* ty=Tensor[(20, 20, 16, 1, 1, 64), int8] */;
    contrib.axelera.odr(%349, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 16, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 16, 64), int8] */;
  %836 = fn (%OutlineComposites_213_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_213") -> Tensor[(20, 20, 4, 64), int8] {
    %832 = contrib.axelera.ifd(%OutlineComposites_213_i0, window_hw=[5, 5], strides=[1, 1], dilations=[1, 1], before_pad_drop=[2, 2, 0], after_pad_drop=[2, 2, 0], padding_value=-128) /* ty=Tensor[(20, 20, 4, 5, 5, 64), int8] */;
    %833 = contrib.axelera.mvm_bypass(%832) /* ty=Tensor[(20, 20, 4, 5, 5, 64), int32] */;
    %834 = contrib.axelera.iau_reduce(%833, operation="MAX", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %835 = contrib.axelera.dpu_bypass(%834) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%835, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %837 = %836(%801) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %838 = fn (%OutlineComposites_214_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_214") -> Tensor[(20, 20, 4, 64), int8] {
    %825 = contrib.axelera.ifd(%OutlineComposites_214_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %826 = contrib.axelera.mvm_bypass(%825) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %827 = contrib.axelera.iau_reduce(%826, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %828 = contrib.axelera.dpu_cast_float32(%827) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %829 = contrib.axelera.dpu_elementwise(%828, meta[relay.Constant][288] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %830 = contrib.axelera.dpu_elementwise(%829, meta[relay.Constant][289] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %831 = cast(%830, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%831, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %839 = %838(%837) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %840 = fn (%OutlineComposites_217_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_217") -> Tensor[(20, 20, 12, 64), int8] {
    %817 = contrib.axelera.ifd(%OutlineComposites_217_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %818 = contrib.axelera.ifdw(meta[relay.Constant][285] /* ty=Tensor[(12, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(12, 4, 1, 1, 64, 64), int8] */;
    %819 = contrib.axelera.mvm(%817, %818) /* ty=Tensor[(20, 20, 12, 1, 1, 64), int32] */;
    %820 = contrib.axelera.iau_reduce(%819, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 12, 1, 1, 64), int32] */;
    %821 = contrib.axelera.dpu_cast_float32(%820) /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %822 = contrib.axelera.dpu_elementwise(%821, meta[relay.Constant][286] /* ty=Tensor[(1, 1, 12, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %823 = contrib.axelera.dpu_elementwise(%822, meta[relay.Constant][287] /* ty=Tensor[(1, 1, 12, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %824 = cast(%823, dtype="int8") /* ty=Tensor[(20, 20, 12, 1, 1, 64), int8] */;
    contrib.axelera.odr(%824, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 12, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 12, 64), int8] */;
  %872 = fn (%OutlineComposites_223_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_223") -> Tensor[(20, 20, 4, 64), int8] {
    %868 = contrib.axelera.ifd(%OutlineComposites_223_i0, window_hw=[9, 9], strides=[1, 1], dilations=[1, 1], before_pad_drop=[4, 4, 0], after_pad_drop=[4, 4, 0], padding_value=-128) /* ty=Tensor[(20, 20, 4, 9, 9, 64), int8] */;
    %869 = contrib.axelera.mvm_bypass(%868) /* ty=Tensor[(20, 20, 4, 9, 9, 64), int32] */;
    %870 = contrib.axelera.iau_reduce(%869, operation="MAX", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %871 = contrib.axelera.dpu_bypass(%870) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%871, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %873 = %872(%801) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %874 = fn (%OutlineComposites_224_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_224") -> Tensor[(20, 20, 4, 64), int8] {
    %861 = contrib.axelera.ifd(%OutlineComposites_224_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %862 = contrib.axelera.mvm_bypass(%861) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %863 = contrib.axelera.iau_reduce(%862, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %864 = contrib.axelera.dpu_cast_float32(%863) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %865 = contrib.axelera.dpu_elementwise(%864, meta[relay.Constant][297] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %866 = contrib.axelera.dpu_elementwise(%865, meta[relay.Constant][298] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %867 = cast(%866, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%867, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %875 = %874(%873) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %876 = fn (%OutlineComposites_227_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_227") -> Tensor[(20, 20, 8, 64), int8] {
    %853 = contrib.axelera.ifd(%OutlineComposites_227_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %854 = contrib.axelera.ifdw(meta[relay.Constant][294] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %855 = contrib.axelera.mvm(%853, %854) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %856 = contrib.axelera.iau_reduce(%855, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %857 = contrib.axelera.dpu_cast_float32(%856) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %858 = contrib.axelera.dpu_elementwise(%857, meta[relay.Constant][295] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %859 = contrib.axelera.dpu_elementwise(%858, meta[relay.Constant][296] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %860 = cast(%859, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%860, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %888 = fn (%OutlineComposites_233_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_233") -> Tensor[(20, 20, 4, 64), int8] {
    %884 = contrib.axelera.ifd(%OutlineComposites_233_i0, window_hw=[13, 13], strides=[1, 1], dilations=[1, 1], before_pad_drop=[6, 6, 0], after_pad_drop=[6, 6, 0], padding_value=-128) /* ty=Tensor[(20, 20, 4, 13, 13, 64), int8] */;
    %885 = contrib.axelera.mvm_bypass(%884) /* ty=Tensor[(20, 20, 4, 13, 13, 64), int32] */;
    %886 = contrib.axelera.iau_reduce(%885, operation="MAX", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %887 = contrib.axelera.dpu_bypass(%886) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%887, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %889 = %888(%801) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %890 = fn (%OutlineComposites_234_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_234") -> Tensor[(20, 20, 4, 64), int8] {
    %877 = contrib.axelera.ifd(%OutlineComposites_234_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %878 = contrib.axelera.mvm_bypass(%877) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %879 = contrib.axelera.iau_reduce(%878, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %880 = contrib.axelera.dpu_cast_float32(%879) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %881 = contrib.axelera.dpu_elementwise(%880, meta[relay.Constant][299] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %882 = contrib.axelera.dpu_elementwise(%881, meta[relay.Constant][300] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %883 = cast(%882, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%883, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %891 = %876(%875) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %892 = %890(%889) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %893 = fn (%OutlineComposites_231_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, %OutlineComposites_231_i2: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_231") -> Tensor[(20, 20, 8, 64), int8] {
    %841 = contrib.axelera.ifd(%OutlineComposites_231_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %842 = contrib.axelera.dpu_cast_float32(%841) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %843 = contrib.axelera.ifd(%OutlineComposites_231_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %844 = contrib.axelera.ifdw(meta[relay.Constant][291] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %845 = contrib.axelera.mvm(%843, %844) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %846 = contrib.axelera.iau_reduce(%845, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %847 = contrib.axelera.dpu_cast_float32(%846) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %848 = contrib.axelera.dpu_elementwise(%847, meta[relay.Constant][292] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %849 = contrib.axelera.dpu_elementwise(%842, meta[relay.Constant][290] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %850 = contrib.axelera.dpu_elementwise(%848, meta[relay.Constant][293] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %851 = contrib.axelera.dpu_elementwise(%849, %850, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %852 = cast(%851, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%852, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8], Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %894 = %840(%839) /* ty=Tensor[(20, 20, 12, 64), int8] */;
  %895 = %893(%891, %892) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %896 = fn (%OutlineComposites_221_i0: Tensor[(20, 20, 12, 64), int8] /* ty=Tensor[(20, 20, 12, 64), int8] */, %OutlineComposites_221_i2: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_221") -> Tensor[(20, 20, 12, 64), int8] {
    %805 = contrib.axelera.ifd(%OutlineComposites_221_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 12, 1, 1, 64), int8] */;
    %806 = contrib.axelera.dpu_cast_float32(%805) /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %807 = contrib.axelera.ifd(%OutlineComposites_221_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %808 = contrib.axelera.ifdw(meta[relay.Constant][282] /* ty=Tensor[(12, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(12, 8, 1, 1, 64, 64), int8] */;
    %809 = contrib.axelera.mvm(%807, %808) /* ty=Tensor[(20, 20, 12, 1, 1, 64), int32] */;
    %810 = contrib.axelera.iau_reduce(%809, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 12, 1, 1, 64), int32] */;
    %811 = contrib.axelera.dpu_cast_float32(%810) /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %812 = contrib.axelera.dpu_elementwise(%811, meta[relay.Constant][283] /* ty=Tensor[(1, 1, 12, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %813 = contrib.axelera.dpu_elementwise(%806, meta[relay.Constant][281] /* ty=Tensor[(1, 1, 12, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %814 = contrib.axelera.dpu_elementwise(%812, meta[relay.Constant][284] /* ty=Tensor[(1, 1, 12, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %815 = contrib.axelera.dpu_elementwise(%813, %814, operation="ADD") /* ty=Tensor[(20, 20, 12, 1, 1, 64), float32] */;
    %816 = cast(%815, dtype="int8") /* ty=Tensor[(20, 20, 12, 1, 1, 64), int8] */;
    contrib.axelera.odr(%816, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 12, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 12, 64), int8], Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 12, 64), int8] */;
  %897 = %804(%803) /* ty=Tensor[(20, 20, 16, 64), int8] */;
  %898 = %896(%894, %895) /* ty=Tensor[(20, 20, 12, 64), int8] */;
  %899 = fn (%OutlineComposites_211_i0: Tensor[(20, 20, 16, 64), int8] /* ty=Tensor[(20, 20, 16, 64), int8] */, %OutlineComposites_211_i2: Tensor[(20, 20, 12, 64), int8] /* ty=Tensor[(20, 20, 12, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_211") -> Tensor[(20, 20, 16, 64), int8] {
    %330 = contrib.axelera.ifd(%OutlineComposites_211_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 16, 1, 1, 64), int8] */;
    %331 = contrib.axelera.dpu_cast_float32(%330) /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %332 = contrib.axelera.ifd(%OutlineComposites_211_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 12, 1, 1, 64), int8] */;
    %333 = contrib.axelera.ifdw(meta[relay.Constant][117] /* ty=Tensor[(16, 12, 1, 1, 64, 64), int8] */) /* ty=Tensor[(16, 12, 1, 1, 64, 64), int8] */;
    %334 = contrib.axelera.mvm(%332, %333) /* ty=Tensor[(20, 20, 16, 1, 1, 64), int32] */;
    %335 = contrib.axelera.iau_reduce(%334, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 16, 1, 1, 64), int32] */;
    %336 = contrib.axelera.dpu_cast_float32(%335) /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %337 = contrib.axelera.dpu_elementwise(%336, meta[relay.Constant][118] /* ty=Tensor[(1, 1, 16, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %338 = contrib.axelera.dpu_elementwise(%331, meta[relay.Constant][116] /* ty=Tensor[(1, 1, 16, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %339 = contrib.axelera.dpu_elementwise(%337, meta[relay.Constant][119] /* ty=Tensor[(1, 1, 16, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %340 = contrib.axelera.dpu_elementwise(%338, %339, operation="ADD") /* ty=Tensor[(20, 20, 16, 1, 1, 64), float32] */;
    %341 = cast(%340, dtype="int8") /* ty=Tensor[(20, 20, 16, 1, 1, 64), int8] */;
    contrib.axelera.odr(%341, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 16, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 16, 64), int8], Tensor[(20, 20, 12, 64), int8]) -> Tensor[(20, 20, 16, 64), int8] */;
  %900 = %899(%897, %898) /* ty=Tensor[(20, 20, 16, 64), int8] */;
  %901 = fn (%OutlineComposites_249_i0: Tensor[(20, 20, 16, 64), int8] /* ty=Tensor[(20, 20, 16, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_249") -> Tensor[(20, 20, 8, 64), int8] {
    %322 = contrib.axelera.ifd(%OutlineComposites_249_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 16, 1, 1, 64), int8] */;
    %323 = contrib.axelera.ifdw(meta[relay.Constant][113] /* ty=Tensor[(8, 16, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 16, 1, 1, 64, 64), int8] */;
    %324 = contrib.axelera.mvm(%322, %323) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %325 = contrib.axelera.iau_reduce(%324, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %326 = contrib.axelera.dpu_cast_float32(%325) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %327 = contrib.axelera.dpu_elementwise(%326, meta[relay.Constant][114] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %328 = contrib.axelera.dpu_elementwise(%327, meta[relay.Constant][115] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %329 = cast(%328, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%329, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 16, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %902 = %901(%900) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %903 = fn (%OutlineComposites_253_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_253") -> Tensor[(20, 20, 4, 64), int8] {
    %314 = contrib.axelera.ifd(%OutlineComposites_253_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %315 = contrib.axelera.ifdw(meta[relay.Constant][110] /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */;
    %316 = contrib.axelera.mvm(%314, %315) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %317 = contrib.axelera.iau_reduce(%316, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %318 = contrib.axelera.dpu_cast_float32(%317) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %319 = contrib.axelera.dpu_elementwise(%318, meta[relay.Constant][111] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %320 = contrib.axelera.dpu_elementwise(%319, meta[relay.Constant][112] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %321 = cast(%320, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%321, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %904 = %903(%902) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %905 = fn (%OutlineComposites_257_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_257") -> Tensor[(20, 20, 4, 64), int8] {
    %306 = contrib.axelera.ifd(%OutlineComposites_257_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %307 = contrib.axelera.ifdw(meta[relay.Constant][107] /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */;
    %308 = contrib.axelera.mvm(%306, %307) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %309 = contrib.axelera.iau_reduce(%308, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %310 = contrib.axelera.dpu_cast_float32(%309) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %311 = contrib.axelera.dpu_elementwise(%310, meta[relay.Constant][108] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %312 = contrib.axelera.dpu_elementwise(%311, meta[relay.Constant][109] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %313 = cast(%312, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%313, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %906 = %905(%904) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %907 = fn (%OutlineComposites_261_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_261") -> Tensor[(20, 20, 4, 64), int8] {
    %298 = contrib.axelera.ifd(%OutlineComposites_261_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(20, 20, 4, 3, 3, 64), int8] */;
    %299 = contrib.axelera.ifdw(meta[relay.Constant][104] /* ty=Tensor[(4, 4, 3, 3, 64, 64), int8] */) /* ty=Tensor[(4, 4, 3, 3, 64, 64), int8] */;
    %300 = contrib.axelera.mvm(%298, %299) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %301 = contrib.axelera.iau_reduce(%300, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %302 = contrib.axelera.dpu_cast_float32(%301) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %303 = contrib.axelera.dpu_elementwise(%302, meta[relay.Constant][105] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %304 = contrib.axelera.dpu_elementwise(%303, meta[relay.Constant][106] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %305 = cast(%304, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%305, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %908 = %907(%906) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %909 = fn (%OutlineComposites_265_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_265") -> Tensor[(20, 20, 8, 64), int8] {
    %290 = contrib.axelera.ifd(%OutlineComposites_265_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %291 = contrib.axelera.ifdw(meta[relay.Constant][101] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %292 = contrib.axelera.mvm(%290, %291) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %293 = contrib.axelera.iau_reduce(%292, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %294 = contrib.axelera.dpu_cast_float32(%293) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %295 = contrib.axelera.dpu_elementwise(%294, meta[relay.Constant][102] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %296 = contrib.axelera.dpu_elementwise(%295, meta[relay.Constant][103] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %297 = cast(%296, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%297, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %918 = fn (%OutlineComposites_271_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_271") -> Tensor[(20, 20, 4, 64), int8] {
    %910 = contrib.axelera.ifd(%OutlineComposites_271_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %911 = contrib.axelera.ifdw(meta[relay.Constant][301] /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */;
    %912 = contrib.axelera.mvm(%910, %911) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %913 = contrib.axelera.iau_reduce(%912, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %914 = contrib.axelera.dpu_cast_float32(%913) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %915 = contrib.axelera.dpu_elementwise(%914, meta[relay.Constant][302] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %916 = contrib.axelera.dpu_elementwise(%915, meta[relay.Constant][303] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %917 = cast(%916, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%917, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %919 = %909(%908) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %920 = %918(%902) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %921 = fn (%OutlineComposites_269_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, %OutlineComposites_269_i2: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_269") -> Tensor[(20, 20, 8, 64), int8] {
    %278 = contrib.axelera.ifd(%OutlineComposites_269_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %279 = contrib.axelera.dpu_cast_float32(%278) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %280 = contrib.axelera.ifd(%OutlineComposites_269_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %281 = contrib.axelera.ifdw(meta[relay.Constant][98] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %282 = contrib.axelera.mvm(%280, %281) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %283 = contrib.axelera.iau_reduce(%282, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %284 = contrib.axelera.dpu_cast_float32(%283) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %285 = contrib.axelera.dpu_elementwise(%284, meta[relay.Constant][99] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %286 = contrib.axelera.dpu_elementwise(%279, meta[relay.Constant][97] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %287 = contrib.axelera.dpu_elementwise(%285, meta[relay.Constant][100] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %288 = contrib.axelera.dpu_elementwise(%286, %287, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %289 = cast(%288, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%289, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8], Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %922 = %921(%919, %920) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %923 = fn (%OutlineComposites_279_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_279") -> Tensor[(20, 20, 8, 64), int8] {
    %270 = contrib.axelera.ifd(%OutlineComposites_279_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %271 = contrib.axelera.ifdw(meta[relay.Constant][94] /* ty=Tensor[(8, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 8, 1, 1, 64, 64), int8] */;
    %272 = contrib.axelera.mvm(%270, %271) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %273 = contrib.axelera.iau_reduce(%272, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %274 = contrib.axelera.dpu_cast_float32(%273) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %275 = contrib.axelera.dpu_elementwise(%274, meta[relay.Constant][95] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %276 = contrib.axelera.dpu_elementwise(%275, meta[relay.Constant][96] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %277 = cast(%276, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%277, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %924 = %923(%922) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %925 = fn (%OutlineComposites_283_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_283") -> Tensor[(20, 20, 4, 64), int8] {
    %262 = contrib.axelera.ifd(%OutlineComposites_283_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %263 = contrib.axelera.ifdw(meta[relay.Constant][91] /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */;
    %264 = contrib.axelera.mvm(%262, %263) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %265 = contrib.axelera.iau_reduce(%264, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %266 = contrib.axelera.dpu_cast_float32(%265) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %267 = contrib.axelera.dpu_elementwise(%266, meta[relay.Constant][92] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %268 = contrib.axelera.dpu_elementwise(%267, meta[relay.Constant][93] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %269 = cast(%268, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%269, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %926 = %925(%924) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %927 = fn (%OutlineComposites_287_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_287") -> Tensor[(40, 40, 4, 64), int8] {
    %258 = contrib.axelera.ifd(%OutlineComposites_287_i0, window_hw=[2, 2], strides=[1, 1], dilations=[0, 0], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 2, 2, 64), int8] */;
    %259 = contrib.axelera.mvm_bypass(%258) /* ty=Tensor[(20, 20, 4, 2, 2, 64), int32] */;
    %260 = contrib.axelera.iau_bypass(%259) /* ty=Tensor[(20, 20, 4, 2, 2, 64), int32] */;
    %261 = contrib.axelera.dpu_bypass(%260) /* ty=Tensor[(20, 20, 4, 2, 2, 64), int8] */;
    contrib.axelera.odr(%261, window_hw=[2, 2], strides=[2, 2], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %928 = %927(%926) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %929 = fn (%OutlineComposites_288_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_288") -> Tensor[(40, 40, 4, 64), int8] {
    %251 = contrib.axelera.ifd(%OutlineComposites_288_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %252 = contrib.axelera.mvm_bypass(%251) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %253 = contrib.axelera.iau_reduce(%252, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %254 = contrib.axelera.dpu_cast_float32(%253) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %255 = contrib.axelera.dpu_elementwise(%254, meta[relay.Constant][89] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %256 = contrib.axelera.dpu_elementwise(%255, meta[relay.Constant][90] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %257 = cast(%256, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%257, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %930 = %929(%928) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %931 = fn (%OutlineComposites_291_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_291") -> Tensor[(40, 40, 8, 64), int8] {
    %243 = contrib.axelera.ifd(%OutlineComposites_291_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %244 = contrib.axelera.ifdw(meta[relay.Constant][86] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %245 = contrib.axelera.mvm(%243, %244) /* ty=Tensor[(40, 40, 8, 1, 1, 64), int32] */;
    %246 = contrib.axelera.iau_reduce(%245, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 8, 1, 1, 64), int32] */;
    %247 = contrib.axelera.dpu_cast_float32(%246) /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %248 = contrib.axelera.dpu_elementwise(%247, meta[relay.Constant][87] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %249 = contrib.axelera.dpu_elementwise(%248, meta[relay.Constant][88] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %250 = cast(%249, dtype="int8") /* ty=Tensor[(40, 40, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%250, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 8, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 8, 64), int8] */;
  %939 = fn (%OutlineComposites_297_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_297") -> Tensor[(40, 40, 4, 64), int8] {
    %932 = contrib.axelera.ifd(%OutlineComposites_297_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %933 = contrib.axelera.mvm_bypass(%932) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %934 = contrib.axelera.iau_reduce(%933, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %935 = contrib.axelera.dpu_cast_float32(%934) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %936 = contrib.axelera.dpu_elementwise(%935, meta[relay.Constant][304] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %937 = contrib.axelera.dpu_elementwise(%936, meta[relay.Constant][305] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %938 = cast(%937, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%938, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %940 = %931(%930) /* ty=Tensor[(40, 40, 8, 64), int8] */;
  %941 = %939(%797) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %942 = fn (%OutlineComposites_295_i0: Tensor[(40, 40, 8, 64), int8] /* ty=Tensor[(40, 40, 8, 64), int8] */, %OutlineComposites_295_i2: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_295") -> Tensor[(40, 40, 8, 64), int8] {
    %231 = contrib.axelera.ifd(%OutlineComposites_295_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 8, 1, 1, 64), int8] */;
    %232 = contrib.axelera.dpu_cast_float32(%231) /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %233 = contrib.axelera.ifd(%OutlineComposites_295_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %234 = contrib.axelera.ifdw(meta[relay.Constant][83] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %235 = contrib.axelera.mvm(%233, %234) /* ty=Tensor[(40, 40, 8, 1, 1, 64), int32] */;
    %236 = contrib.axelera.iau_reduce(%235, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 8, 1, 1, 64), int32] */;
    %237 = contrib.axelera.dpu_cast_float32(%236) /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %238 = contrib.axelera.dpu_elementwise(%237, meta[relay.Constant][84] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %239 = contrib.axelera.dpu_elementwise(%232, meta[relay.Constant][82] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %240 = contrib.axelera.dpu_elementwise(%238, meta[relay.Constant][85] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %241 = contrib.axelera.dpu_elementwise(%239, %240, operation="ADD") /* ty=Tensor[(40, 40, 8, 1, 1, 64), float32] */;
    %242 = cast(%241, dtype="int8") /* ty=Tensor[(40, 40, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%242, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 8, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 8, 64), int8], Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 8, 64), int8] */;
  %943 = %942(%940, %941) /* ty=Tensor[(40, 40, 8, 64), int8] */;
  %944 = fn (%OutlineComposites_304_i0: Tensor[(40, 40, 8, 64), int8] /* ty=Tensor[(40, 40, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_304") -> Tensor[(40, 40, 2, 64), int8] {
    %223 = contrib.axelera.ifd(%OutlineComposites_304_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 8, 1, 1, 64), int8] */;
    %224 = contrib.axelera.ifdw(meta[relay.Constant][79] /* ty=Tensor[(2, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 8, 1, 1, 64, 64), int8] */;
    %225 = contrib.axelera.mvm(%223, %224) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %226 = contrib.axelera.iau_reduce(%225, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %227 = contrib.axelera.dpu_cast_float32(%226) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %228 = contrib.axelera.dpu_elementwise(%227, meta[relay.Constant][80] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %229 = contrib.axelera.dpu_elementwise(%228, meta[relay.Constant][81] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %230 = cast(%229, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%230, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 8, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %945 = %944(%943) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %946 = fn (%OutlineComposites_308_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_308") -> Tensor[(40, 40, 2, 64), int8] {
    %215 = contrib.axelera.ifd(%OutlineComposites_308_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %216 = contrib.axelera.ifdw(meta[relay.Constant][76] /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */;
    %217 = contrib.axelera.mvm(%215, %216) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %218 = contrib.axelera.iau_reduce(%217, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %219 = contrib.axelera.dpu_cast_float32(%218) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %220 = contrib.axelera.dpu_elementwise(%219, meta[relay.Constant][77] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %221 = contrib.axelera.dpu_elementwise(%220, meta[relay.Constant][78] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %222 = cast(%221, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%222, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %947 = %946(%945) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %948 = fn (%OutlineComposites_312_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_312") -> Tensor[(40, 40, 2, 64), int8] {
    %207 = contrib.axelera.ifd(%OutlineComposites_312_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(40, 40, 2, 3, 3, 64), int8] */;
    %208 = contrib.axelera.ifdw(meta[relay.Constant][73] /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */) /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */;
    %209 = contrib.axelera.mvm(%207, %208) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %210 = contrib.axelera.iau_reduce(%209, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %211 = contrib.axelera.dpu_cast_float32(%210) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %212 = contrib.axelera.dpu_elementwise(%211, meta[relay.Constant][74] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %213 = contrib.axelera.dpu_elementwise(%212, meta[relay.Constant][75] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %214 = cast(%213, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%214, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %949 = %948(%947) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %950 = fn (%OutlineComposites_316_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_316") -> Tensor[(40, 40, 4, 64), int8] {
    %199 = contrib.axelera.ifd(%OutlineComposites_316_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %200 = contrib.axelera.ifdw(meta[relay.Constant][70] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %201 = contrib.axelera.mvm(%199, %200) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %202 = contrib.axelera.iau_reduce(%201, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %203 = contrib.axelera.dpu_cast_float32(%202) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %204 = contrib.axelera.dpu_elementwise(%203, meta[relay.Constant][71] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %205 = contrib.axelera.dpu_elementwise(%204, meta[relay.Constant][72] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %206 = cast(%205, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%206, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %959 = fn (%OutlineComposites_322_i0: Tensor[(40, 40, 8, 64), int8] /* ty=Tensor[(40, 40, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_322") -> Tensor[(40, 40, 2, 64), int8] {
    %951 = contrib.axelera.ifd(%OutlineComposites_322_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 8, 1, 1, 64), int8] */;
    %952 = contrib.axelera.ifdw(meta[relay.Constant][306] /* ty=Tensor[(2, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 8, 1, 1, 64, 64), int8] */;
    %953 = contrib.axelera.mvm(%951, %952) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %954 = contrib.axelera.iau_reduce(%953, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %955 = contrib.axelera.dpu_cast_float32(%954) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %956 = contrib.axelera.dpu_elementwise(%955, meta[relay.Constant][307] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %957 = contrib.axelera.dpu_elementwise(%956, meta[relay.Constant][308] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %958 = cast(%957, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%958, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 8, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %960 = %950(%949) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %961 = %959(%943) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %962 = fn (%OutlineComposites_320_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, %OutlineComposites_320_i2: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_320") -> Tensor[(40, 40, 4, 64), int8] {
    %187 = contrib.axelera.ifd(%OutlineComposites_320_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %188 = contrib.axelera.dpu_cast_float32(%187) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %189 = contrib.axelera.ifd(%OutlineComposites_320_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %190 = contrib.axelera.ifdw(meta[relay.Constant][67] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %191 = contrib.axelera.mvm(%189, %190) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %192 = contrib.axelera.iau_reduce(%191, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %193 = contrib.axelera.dpu_cast_float32(%192) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %194 = contrib.axelera.dpu_elementwise(%193, meta[relay.Constant][68] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %195 = contrib.axelera.dpu_elementwise(%188, meta[relay.Constant][66] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %196 = contrib.axelera.dpu_elementwise(%194, meta[relay.Constant][69] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %197 = contrib.axelera.dpu_elementwise(%195, %196, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %198 = cast(%197, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%198, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8], Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %963 = %962(%960, %961) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %964 = fn (%OutlineComposites_330_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_330") -> Tensor[(40, 40, 4, 64), int8] {
    %179 = contrib.axelera.ifd(%OutlineComposites_330_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %180 = contrib.axelera.ifdw(meta[relay.Constant][63] /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */;
    %181 = contrib.axelera.mvm(%179, %180) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %182 = contrib.axelera.iau_reduce(%181, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %183 = contrib.axelera.dpu_cast_float32(%182) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %184 = contrib.axelera.dpu_elementwise(%183, meta[relay.Constant][64] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %185 = contrib.axelera.dpu_elementwise(%184, meta[relay.Constant][65] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %186 = cast(%185, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%186, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %965 = %964(%963) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %966 = fn (%OutlineComposites_334_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_334") -> Tensor[(40, 40, 2, 64), int8] {
    %171 = contrib.axelera.ifd(%OutlineComposites_334_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %172 = contrib.axelera.ifdw(meta[relay.Constant][60] /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */;
    %173 = contrib.axelera.mvm(%171, %172) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %174 = contrib.axelera.iau_reduce(%173, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %175 = contrib.axelera.dpu_cast_float32(%174) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %176 = contrib.axelera.dpu_elementwise(%175, meta[relay.Constant][61] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %177 = contrib.axelera.dpu_elementwise(%176, meta[relay.Constant][62] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %178 = cast(%177, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%178, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %967 = %966(%965) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %968 = fn (%OutlineComposites_338_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_338") -> Tensor[(80, 80, 2, 64), int8] {
    %167 = contrib.axelera.ifd(%OutlineComposites_338_i0, window_hw=[2, 2], strides=[1, 1], dilations=[0, 0], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 2, 2, 64), int8] */;
    %168 = contrib.axelera.mvm_bypass(%167) /* ty=Tensor[(40, 40, 2, 2, 2, 64), int32] */;
    %169 = contrib.axelera.iau_bypass(%168) /* ty=Tensor[(40, 40, 2, 2, 2, 64), int32] */;
    %170 = contrib.axelera.dpu_bypass(%169) /* ty=Tensor[(40, 40, 2, 2, 2, 64), int8] */;
    contrib.axelera.odr(%170, window_hw=[2, 2], strides=[2, 2], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %969 = %968(%967) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %970 = fn (%OutlineComposites_339_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_339") -> Tensor[(80, 80, 2, 64), int8] {
    %160 = contrib.axelera.ifd(%OutlineComposites_339_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %161 = contrib.axelera.mvm_bypass(%160) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %162 = contrib.axelera.iau_reduce(%161, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %163 = contrib.axelera.dpu_cast_float32(%162) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %164 = contrib.axelera.dpu_elementwise(%163, meta[relay.Constant][58] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %165 = contrib.axelera.dpu_elementwise(%164, meta[relay.Constant][59] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %166 = cast(%165, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%166, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %971 = %970(%969) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %972 = fn (%OutlineComposites_342_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_342") -> Tensor[(80, 80, 4, 64), int8] {
    %152 = contrib.axelera.ifd(%OutlineComposites_342_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %153 = contrib.axelera.ifdw(meta[relay.Constant][55] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %154 = contrib.axelera.mvm(%152, %153) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int32] */;
    %155 = contrib.axelera.iau_reduce(%154, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int32] */;
    %156 = contrib.axelera.dpu_cast_float32(%155) /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %157 = contrib.axelera.dpu_elementwise(%156, meta[relay.Constant][56] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %158 = contrib.axelera.dpu_elementwise(%157, meta[relay.Constant][57] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %159 = cast(%158, dtype="int8") /* ty=Tensor[(80, 80, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%159, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 4, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 4, 64), int8] */;
  %980 = fn (%OutlineComposites_348_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_348") -> Tensor[(80, 80, 2, 64), int8] {
    %973 = contrib.axelera.ifd(%OutlineComposites_348_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %974 = contrib.axelera.mvm_bypass(%973) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %975 = contrib.axelera.iau_reduce(%974, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %976 = contrib.axelera.dpu_cast_float32(%975) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %977 = contrib.axelera.dpu_elementwise(%976, meta[relay.Constant][309] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %978 = contrib.axelera.dpu_elementwise(%977, meta[relay.Constant][310] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %979 = cast(%978, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%979, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %981 = %972(%971) /* ty=Tensor[(80, 80, 4, 64), int8] */;
  %982 = %980(%756) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %983 = fn (%OutlineComposites_346_i0: Tensor[(80, 80, 4, 64), int8] /* ty=Tensor[(80, 80, 4, 64), int8] */, %OutlineComposites_346_i2: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_346") -> Tensor[(80, 80, 4, 64), int8] {
    %140 = contrib.axelera.ifd(%OutlineComposites_346_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int8] */;
    %141 = contrib.axelera.dpu_cast_float32(%140) /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %142 = contrib.axelera.ifd(%OutlineComposites_346_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %143 = contrib.axelera.ifdw(meta[relay.Constant][52] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %144 = contrib.axelera.mvm(%142, %143) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int32] */;
    %145 = contrib.axelera.iau_reduce(%144, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int32] */;
    %146 = contrib.axelera.dpu_cast_float32(%145) /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %147 = contrib.axelera.dpu_elementwise(%146, meta[relay.Constant][53] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %148 = contrib.axelera.dpu_elementwise(%141, meta[relay.Constant][51] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %149 = contrib.axelera.dpu_elementwise(%147, meta[relay.Constant][54] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %150 = contrib.axelera.dpu_elementwise(%148, %149, operation="ADD") /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %151 = cast(%150, dtype="int8") /* ty=Tensor[(80, 80, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%151, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 4, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 4, 64), int8], Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 4, 64), int8] */;
  %984 = %983(%981, %982) /* ty=Tensor[(80, 80, 4, 64), int8] */;
  %985 = fn (%OutlineComposites_355_i0: Tensor[(80, 80, 4, 64), int8] /* ty=Tensor[(80, 80, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_355") -> Tensor[(80, 80, 1, 64), int8] {
    %132 = contrib.axelera.ifd(%OutlineComposites_355_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int8] */;
    %133 = contrib.axelera.ifdw(meta[relay.Constant][48] /* ty=Tensor[(1, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 4, 1, 1, 64, 64), int8] */;
    %134 = contrib.axelera.mvm(%132, %133) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %135 = contrib.axelera.iau_reduce(%134, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %136 = contrib.axelera.dpu_cast_float32(%135) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %137 = contrib.axelera.dpu_elementwise(%136, meta[relay.Constant][49] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %138 = contrib.axelera.dpu_elementwise(%137, meta[relay.Constant][50] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %139 = cast(%138, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%139, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 4, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %986 = %985(%984) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %987 = fn (%OutlineComposites_359_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_359") -> Tensor[(80, 80, 1, 64), int8] {
    %124 = contrib.axelera.ifd(%OutlineComposites_359_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %125 = contrib.axelera.ifdw(meta[relay.Constant][45] /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 1, 1, 1, 64, 64), int8] */;
    %126 = contrib.axelera.mvm(%124, %125) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %127 = contrib.axelera.iau_reduce(%126, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %128 = contrib.axelera.dpu_cast_float32(%127) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %129 = contrib.axelera.dpu_elementwise(%128, meta[relay.Constant][46] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %130 = contrib.axelera.dpu_elementwise(%129, meta[relay.Constant][47] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %131 = cast(%130, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%131, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %988 = %987(%986) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %989 = fn (%OutlineComposites_363_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_363") -> Tensor[(80, 80, 1, 64), int8] {
    %116 = contrib.axelera.ifd(%OutlineComposites_363_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(80, 80, 1, 3, 3, 64), int8] */;
    %117 = contrib.axelera.ifdw(meta[relay.Constant][42] /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */) /* ty=Tensor[(1, 1, 3, 3, 64, 64), int8] */;
    %118 = contrib.axelera.mvm(%116, %117) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %119 = contrib.axelera.iau_reduce(%118, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %120 = contrib.axelera.dpu_cast_float32(%119) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %121 = contrib.axelera.dpu_elementwise(%120, meta[relay.Constant][43] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %122 = contrib.axelera.dpu_elementwise(%121, meta[relay.Constant][44] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %123 = cast(%122, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%123, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %990 = %989(%988) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %991 = fn (%OutlineComposites_367_i0: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_367") -> Tensor[(80, 80, 2, 64), int8] {
    %108 = contrib.axelera.ifd(%OutlineComposites_367_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %109 = contrib.axelera.ifdw(meta[relay.Constant][39] /* ty=Tensor[(2, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 1, 1, 1, 64, 64), int8] */;
    %110 = contrib.axelera.mvm(%108, %109) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %111 = contrib.axelera.iau_reduce(%110, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %112 = contrib.axelera.dpu_cast_float32(%111) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %113 = contrib.axelera.dpu_elementwise(%112, meta[relay.Constant][40] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %114 = contrib.axelera.dpu_elementwise(%113, meta[relay.Constant][41] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %115 = cast(%114, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%115, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %1000 = fn (%OutlineComposites_373_i0: Tensor[(80, 80, 4, 64), int8] /* ty=Tensor[(80, 80, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_373") -> Tensor[(80, 80, 1, 64), int8] {
    %992 = contrib.axelera.ifd(%OutlineComposites_373_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int8] */;
    %993 = contrib.axelera.ifdw(meta[relay.Constant][311] /* ty=Tensor[(1, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(1, 4, 1, 1, 64, 64), int8] */;
    %994 = contrib.axelera.mvm(%992, %993) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %995 = contrib.axelera.iau_reduce(%994, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int32] */;
    %996 = contrib.axelera.dpu_cast_float32(%995) /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %997 = contrib.axelera.dpu_elementwise(%996, meta[relay.Constant][312] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %998 = contrib.axelera.dpu_elementwise(%997, meta[relay.Constant][313] /* ty=Tensor[(1, 1, 1, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 1, 1, 1, 64), float32] */;
    %999 = cast(%998, dtype="int8") /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    contrib.axelera.odr(%999, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 4, 64), int8]) -> Tensor[(80, 80, 1, 64), int8] */;
  %1001 = %991(%990) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %1002 = %1000(%984) /* ty=Tensor[(80, 80, 1, 64), int8] */;
  %1003 = fn (%OutlineComposites_371_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, %OutlineComposites_371_i2: Tensor[(80, 80, 1, 64), int8] /* ty=Tensor[(80, 80, 1, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_371") -> Tensor[(80, 80, 2, 64), int8] {
    %96 = contrib.axelera.ifd(%OutlineComposites_371_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %97 = contrib.axelera.dpu_cast_float32(%96) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %98 = contrib.axelera.ifd(%OutlineComposites_371_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 1, 1, 1, 64), int8] */;
    %99 = contrib.axelera.ifdw(meta[relay.Constant][36] /* ty=Tensor[(2, 1, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 1, 1, 1, 64, 64), int8] */;
    %100 = contrib.axelera.mvm(%98, %99) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %101 = contrib.axelera.iau_reduce(%100, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %102 = contrib.axelera.dpu_cast_float32(%101) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %103 = contrib.axelera.dpu_elementwise(%102, meta[relay.Constant][37] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %104 = contrib.axelera.dpu_elementwise(%97, meta[relay.Constant][35] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %105 = contrib.axelera.dpu_elementwise(%103, meta[relay.Constant][38] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %106 = contrib.axelera.dpu_elementwise(%104, %105, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %107 = cast(%106, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%107, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8], Tensor[(80, 80, 1, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %1004 = %1003(%1001, %1002) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %1005 = fn (%OutlineComposites_381_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_381") -> Tensor[(80, 80, 2, 64), int8] {
    %88 = contrib.axelera.ifd(%OutlineComposites_381_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %89 = contrib.axelera.ifdw(meta[relay.Constant][32] /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */;
    %90 = contrib.axelera.mvm(%88, %89) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %91 = contrib.axelera.iau_reduce(%90, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int32] */;
    %92 = contrib.axelera.dpu_cast_float32(%91) /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %93 = contrib.axelera.dpu_elementwise(%92, meta[relay.Constant][33] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %94 = contrib.axelera.dpu_elementwise(%93, meta[relay.Constant][34] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 2, 1, 1, 64), float32] */;
    %95 = cast(%94, dtype="int8") /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%95, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 2, 64), int8] */;
  %1006 = %1005(%1004) /* ty=Tensor[(80, 80, 2, 64), int8] */;
  %1007 = fn (%OutlineComposites_385_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_385") -> Tensor[(40, 40, 2, 64), int8] {
    %80 = contrib.axelera.ifd(%OutlineComposites_385_i0, window_hw=[3, 3], strides=[2, 2], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(40, 40, 2, 3, 3, 64), int8] */;
    %81 = contrib.axelera.ifdw(meta[relay.Constant][29] /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */) /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */;
    %82 = contrib.axelera.mvm(%80, %81) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %83 = contrib.axelera.iau_reduce(%82, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %84 = contrib.axelera.dpu_cast_float32(%83) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %85 = contrib.axelera.dpu_elementwise(%84, meta[relay.Constant][30] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %86 = contrib.axelera.dpu_elementwise(%85, meta[relay.Constant][31] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %87 = cast(%86, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%87, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %1008 = %1007(%1006) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %1009 = fn (%OutlineComposites_389_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_389") -> Tensor[(40, 40, 4, 64), int8] {
    %72 = contrib.axelera.ifd(%OutlineComposites_389_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %73 = contrib.axelera.ifdw(meta[relay.Constant][26] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %74 = contrib.axelera.mvm(%72, %73) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %75 = contrib.axelera.iau_reduce(%74, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %76 = contrib.axelera.dpu_cast_float32(%75) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %77 = contrib.axelera.dpu_elementwise(%76, meta[relay.Constant][27] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %78 = contrib.axelera.dpu_elementwise(%77, meta[relay.Constant][28] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %79 = cast(%78, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%79, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %1017 = fn (%OutlineComposites_395_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_395") -> Tensor[(40, 40, 2, 64), int8] {
    %1010 = contrib.axelera.ifd(%OutlineComposites_395_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %1011 = contrib.axelera.mvm_bypass(%1010) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %1012 = contrib.axelera.iau_reduce(%1011, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %1013 = contrib.axelera.dpu_cast_float32(%1012) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %1014 = contrib.axelera.dpu_elementwise(%1013, meta[relay.Constant][314] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %1015 = contrib.axelera.dpu_elementwise(%1014, meta[relay.Constant][315] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %1016 = cast(%1015, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1016, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %1018 = %1009(%1008) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %1019 = %1017(%967) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %1020 = fn (%OutlineComposites_393_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, %OutlineComposites_393_i2: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_393") -> Tensor[(40, 40, 4, 64), int8] {
    %60 = contrib.axelera.ifd(%OutlineComposites_393_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %61 = contrib.axelera.dpu_cast_float32(%60) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %62 = contrib.axelera.ifd(%OutlineComposites_393_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %63 = contrib.axelera.ifdw(meta[relay.Constant][23] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %64 = contrib.axelera.mvm(%62, %63) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %65 = contrib.axelera.iau_reduce(%64, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %66 = contrib.axelera.dpu_cast_float32(%65) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %67 = contrib.axelera.dpu_elementwise(%66, meta[relay.Constant][24] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %68 = contrib.axelera.dpu_elementwise(%61, meta[relay.Constant][22] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %69 = contrib.axelera.dpu_elementwise(%67, meta[relay.Constant][25] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %70 = contrib.axelera.dpu_elementwise(%68, %69, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %71 = cast(%70, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%71, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8], Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %1021 = %1020(%1018, %1019) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %1022 = fn (%OutlineComposites_402_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_402") -> Tensor[(40, 40, 2, 64), int8] {
    %52 = contrib.axelera.ifd(%OutlineComposites_402_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %53 = contrib.axelera.ifdw(meta[relay.Constant][19] /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */;
    %54 = contrib.axelera.mvm(%52, %53) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %55 = contrib.axelera.iau_reduce(%54, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %56 = contrib.axelera.dpu_cast_float32(%55) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %57 = contrib.axelera.dpu_elementwise(%56, meta[relay.Constant][20] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %58 = contrib.axelera.dpu_elementwise(%57, meta[relay.Constant][21] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %59 = cast(%58, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%59, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %1023 = %1022(%1021) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %1024 = fn (%OutlineComposites_406_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_406") -> Tensor[(40, 40, 2, 64), int8] {
    %44 = contrib.axelera.ifd(%OutlineComposites_406_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %45 = contrib.axelera.ifdw(meta[relay.Constant][16] /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 2, 1, 1, 64, 64), int8] */;
    %46 = contrib.axelera.mvm(%44, %45) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %47 = contrib.axelera.iau_reduce(%46, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %48 = contrib.axelera.dpu_cast_float32(%47) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %49 = contrib.axelera.dpu_elementwise(%48, meta[relay.Constant][17] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %50 = contrib.axelera.dpu_elementwise(%49, meta[relay.Constant][18] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %51 = cast(%50, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%51, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %1025 = %1024(%1023) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %1026 = fn (%OutlineComposites_410_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_410") -> Tensor[(40, 40, 2, 64), int8] {
    %36 = contrib.axelera.ifd(%OutlineComposites_410_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(40, 40, 2, 3, 3, 64), int8] */;
    %37 = contrib.axelera.ifdw(meta[relay.Constant][13] /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */) /* ty=Tensor[(2, 2, 3, 3, 64, 64), int8] */;
    %38 = contrib.axelera.mvm(%36, %37) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %39 = contrib.axelera.iau_reduce(%38, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %40 = contrib.axelera.dpu_cast_float32(%39) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %41 = contrib.axelera.dpu_elementwise(%40, meta[relay.Constant][14] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %42 = contrib.axelera.dpu_elementwise(%41, meta[relay.Constant][15] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %43 = cast(%42, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%43, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %1027 = %1026(%1025) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %1028 = fn (%OutlineComposites_414_i0: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_414") -> Tensor[(40, 40, 4, 64), int8] {
    %28 = contrib.axelera.ifd(%OutlineComposites_414_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %29 = contrib.axelera.ifdw(meta[relay.Constant][10] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %30 = contrib.axelera.mvm(%28, %29) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %31 = contrib.axelera.iau_reduce(%30, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %32 = contrib.axelera.dpu_cast_float32(%31) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %33 = contrib.axelera.dpu_elementwise(%32, meta[relay.Constant][11] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %34 = contrib.axelera.dpu_elementwise(%33, meta[relay.Constant][12] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %35 = cast(%34, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%35, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %1037 = fn (%OutlineComposites_420_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_420") -> Tensor[(40, 40, 2, 64), int8] {
    %1029 = contrib.axelera.ifd(%OutlineComposites_420_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %1030 = contrib.axelera.ifdw(meta[relay.Constant][316] /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(2, 4, 1, 1, 64, 64), int8] */;
    %1031 = contrib.axelera.mvm(%1029, %1030) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %1032 = contrib.axelera.iau_reduce(%1031, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int32] */;
    %1033 = contrib.axelera.dpu_cast_float32(%1032) /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %1034 = contrib.axelera.dpu_elementwise(%1033, meta[relay.Constant][317] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %1035 = contrib.axelera.dpu_elementwise(%1034, meta[relay.Constant][318] /* ty=Tensor[(1, 1, 2, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 2, 1, 1, 64), float32] */;
    %1036 = cast(%1035, dtype="int8") /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1036, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 2, 64), int8] */;
  %1038 = %1028(%1027) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %1039 = %1037(%1021) /* ty=Tensor[(40, 40, 2, 64), int8] */;
  %1040 = fn (%OutlineComposites_418_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, %OutlineComposites_418_i2: Tensor[(40, 40, 2, 64), int8] /* ty=Tensor[(40, 40, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_418") -> Tensor[(40, 40, 4, 64), int8] {
    %16 = contrib.axelera.ifd(%OutlineComposites_418_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %17 = contrib.axelera.dpu_cast_float32(%16) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %18 = contrib.axelera.ifd(%OutlineComposites_418_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 2, 1, 1, 64), int8] */;
    %19 = contrib.axelera.ifdw(meta[relay.Constant][7] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %20 = contrib.axelera.mvm(%18, %19) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %21 = contrib.axelera.iau_reduce(%20, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %22 = contrib.axelera.dpu_cast_float32(%21) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %23 = contrib.axelera.dpu_elementwise(%22, meta[relay.Constant][8] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %24 = contrib.axelera.dpu_elementwise(%17, meta[relay.Constant][6] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %25 = contrib.axelera.dpu_elementwise(%23, meta[relay.Constant][9] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %26 = contrib.axelera.dpu_elementwise(%24, %25, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %27 = cast(%26, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%27, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8], Tensor[(40, 40, 2, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %1041 = %1040(%1038, %1039) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %1042 = fn (%OutlineComposites_428_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_428") -> Tensor[(40, 40, 4, 64), int8] {
    %8 = contrib.axelera.ifd(%OutlineComposites_428_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %9 = contrib.axelera.ifdw(meta[relay.Constant][3] /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */;
    %10 = contrib.axelera.mvm(%8, %9) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %11 = contrib.axelera.iau_reduce(%10, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %12 = contrib.axelera.dpu_cast_float32(%11) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %13 = contrib.axelera.dpu_elementwise(%12, meta[relay.Constant][4] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %14 = contrib.axelera.dpu_elementwise(%13, meta[relay.Constant][5] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %15 = cast(%14, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%15, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %1043 = %1042(%1041) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %1044 = fn (%OutlineComposites_432_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_432") -> Tensor[(40, 40, 4, 64), int8] {
    %0 = contrib.axelera.ifd(%OutlineComposites_432_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    %1 = contrib.axelera.ifdw(meta[relay.Constant][0] /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */;
    %2 = contrib.axelera.mvm(%0, %1) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %3 = contrib.axelera.iau_reduce(%2, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(40, 40, 4, 1, 1, 64), int32] */;
    %4 = contrib.axelera.dpu_cast_float32(%3) /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %5 = contrib.axelera.dpu_elementwise(%4, meta[relay.Constant][1] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %6 = contrib.axelera.dpu_elementwise(%5, meta[relay.Constant][2] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(40, 40, 4, 1, 1, 64), float32] */;
    %7 = cast(%6, dtype="int8") /* ty=Tensor[(40, 40, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%7, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(40, 40, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(40, 40, 4, 64), int8] */;
  %1133 = fn (%OutlineComposites_436_i0: Tensor[(40, 40, 4, 64), int8] /* ty=Tensor[(40, 40, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_436") -> Tensor[(20, 20, 4, 64), int8] {
    %1125 = contrib.axelera.ifd(%OutlineComposites_436_i0, window_hw=[3, 3], strides=[2, 2], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(20, 20, 4, 3, 3, 64), int8] */;
    %1126 = contrib.axelera.ifdw(meta[relay.Constant][348] /* ty=Tensor[(4, 4, 3, 3, 64, 64), int8] */) /* ty=Tensor[(4, 4, 3, 3, 64, 64), int8] */;
    %1127 = contrib.axelera.mvm(%1125, %1126) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1128 = contrib.axelera.iau_reduce(%1127, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1129 = contrib.axelera.dpu_cast_float32(%1128) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1130 = contrib.axelera.dpu_elementwise(%1129, meta[relay.Constant][349] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1131 = contrib.axelera.dpu_elementwise(%1130, meta[relay.Constant][350] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1132 = cast(%1131, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1132, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(40, 40, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %1134 = %1133(%1043) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %1135 = fn (%OutlineComposites_440_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_440") -> Tensor[(20, 20, 8, 64), int8] {
    %1117 = contrib.axelera.ifd(%OutlineComposites_440_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %1118 = contrib.axelera.ifdw(meta[relay.Constant][345] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %1119 = contrib.axelera.mvm(%1117, %1118) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1120 = contrib.axelera.iau_reduce(%1119, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1121 = contrib.axelera.dpu_cast_float32(%1120) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1122 = contrib.axelera.dpu_elementwise(%1121, meta[relay.Constant][346] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1123 = contrib.axelera.dpu_elementwise(%1122, meta[relay.Constant][347] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1124 = cast(%1123, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1124, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %1143 = fn (%OutlineComposites_446_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_446") -> Tensor[(20, 20, 4, 64), int8] {
    %1136 = contrib.axelera.ifd(%OutlineComposites_446_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %1137 = contrib.axelera.mvm_bypass(%1136) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1138 = contrib.axelera.iau_reduce(%1137, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1139 = contrib.axelera.dpu_cast_float32(%1138) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1140 = contrib.axelera.dpu_elementwise(%1139, meta[relay.Constant][351] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1141 = contrib.axelera.dpu_elementwise(%1140, meta[relay.Constant][352] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1142 = cast(%1141, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1142, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %1144 = %1135(%1134) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %1145 = %1143(%926) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %1146 = fn (%OutlineComposites_444_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, %OutlineComposites_444_i2: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_444") -> Tensor[(20, 20, 8, 64), int8] {
    %1105 = contrib.axelera.ifd(%OutlineComposites_444_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %1106 = contrib.axelera.dpu_cast_float32(%1105) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1107 = contrib.axelera.ifd(%OutlineComposites_444_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %1108 = contrib.axelera.ifdw(meta[relay.Constant][342] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %1109 = contrib.axelera.mvm(%1107, %1108) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1110 = contrib.axelera.iau_reduce(%1109, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1111 = contrib.axelera.dpu_cast_float32(%1110) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1112 = contrib.axelera.dpu_elementwise(%1111, meta[relay.Constant][343] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1113 = contrib.axelera.dpu_elementwise(%1106, meta[relay.Constant][341] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1114 = contrib.axelera.dpu_elementwise(%1112, meta[relay.Constant][344] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1115 = contrib.axelera.dpu_elementwise(%1113, %1114, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1116 = cast(%1115, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1116, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8], Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %1147 = %1146(%1144, %1145) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %1148 = fn (%OutlineComposites_453_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_453") -> Tensor[(20, 20, 4, 64), int8] {
    %1097 = contrib.axelera.ifd(%OutlineComposites_453_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %1098 = contrib.axelera.ifdw(meta[relay.Constant][338] /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */;
    %1099 = contrib.axelera.mvm(%1097, %1098) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1100 = contrib.axelera.iau_reduce(%1099, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1101 = contrib.axelera.dpu_cast_float32(%1100) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1102 = contrib.axelera.dpu_elementwise(%1101, meta[relay.Constant][339] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1103 = contrib.axelera.dpu_elementwise(%1102, meta[relay.Constant][340] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1104 = cast(%1103, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1104, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %1149 = %1148(%1147) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %1150 = fn (%OutlineComposites_457_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_457") -> Tensor[(20, 20, 4, 64), int8] {
    %1089 = contrib.axelera.ifd(%OutlineComposites_457_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %1090 = contrib.axelera.ifdw(meta[relay.Constant][335] /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 4, 1, 1, 64, 64), int8] */;
    %1091 = contrib.axelera.mvm(%1089, %1090) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1092 = contrib.axelera.iau_reduce(%1091, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1093 = contrib.axelera.dpu_cast_float32(%1092) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1094 = contrib.axelera.dpu_elementwise(%1093, meta[relay.Constant][336] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1095 = contrib.axelera.dpu_elementwise(%1094, meta[relay.Constant][337] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1096 = cast(%1095, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1096, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %1151 = %1150(%1149) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %1152 = fn (%OutlineComposites_461_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_461") -> Tensor[(20, 20, 4, 64), int8] {
    %1081 = contrib.axelera.ifd(%OutlineComposites_461_i0, window_hw=[3, 3], strides=[1, 1], dilations=[1, 1], before_pad_drop=[1, 1, 0], after_pad_drop=[1, 1, 0], padding_value=-128) /* ty=Tensor[(20, 20, 4, 3, 3, 64), int8] */;
    %1082 = contrib.axelera.ifdw(meta[relay.Constant][332] /* ty=Tensor[(4, 4, 3, 3, 64, 64), int8] */) /* ty=Tensor[(4, 4, 3, 3, 64, 64), int8] */;
    %1083 = contrib.axelera.mvm(%1081, %1082) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1084 = contrib.axelera.iau_reduce(%1083, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1085 = contrib.axelera.dpu_cast_float32(%1084) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1086 = contrib.axelera.dpu_elementwise(%1085, meta[relay.Constant][333] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1087 = contrib.axelera.dpu_elementwise(%1086, meta[relay.Constant][334] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1088 = cast(%1087, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1088, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %1153 = %1152(%1151) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %1154 = fn (%OutlineComposites_465_i0: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_465") -> Tensor[(20, 20, 8, 64), int8] {
    %1073 = contrib.axelera.ifd(%OutlineComposites_465_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %1074 = contrib.axelera.ifdw(meta[relay.Constant][329] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %1075 = contrib.axelera.mvm(%1073, %1074) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1076 = contrib.axelera.iau_reduce(%1075, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1077 = contrib.axelera.dpu_cast_float32(%1076) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1078 = contrib.axelera.dpu_elementwise(%1077, meta[relay.Constant][330] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1079 = contrib.axelera.dpu_elementwise(%1078, meta[relay.Constant][331] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1080 = cast(%1079, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1080, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %1163 = fn (%OutlineComposites_471_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_471") -> Tensor[(20, 20, 4, 64), int8] {
    %1155 = contrib.axelera.ifd(%OutlineComposites_471_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %1156 = contrib.axelera.ifdw(meta[relay.Constant][353] /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */;
    %1157 = contrib.axelera.mvm(%1155, %1156) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1158 = contrib.axelera.iau_reduce(%1157, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1159 = contrib.axelera.dpu_cast_float32(%1158) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1160 = contrib.axelera.dpu_elementwise(%1159, meta[relay.Constant][354] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1161 = contrib.axelera.dpu_elementwise(%1160, meta[relay.Constant][355] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1162 = cast(%1161, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1162, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %1164 = %1154(%1153) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %1165 = %1163(%1147) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %1166 = fn (%OutlineComposites_469_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, %OutlineComposites_469_i2: Tensor[(20, 20, 4, 64), int8] /* ty=Tensor[(20, 20, 4, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_469") -> Tensor[(20, 20, 8, 64), int8] {
    %1061 = contrib.axelera.ifd(%OutlineComposites_469_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %1062 = contrib.axelera.dpu_cast_float32(%1061) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1063 = contrib.axelera.ifd(%OutlineComposites_469_i2, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    %1064 = contrib.axelera.ifdw(meta[relay.Constant][326] /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 4, 1, 1, 64, 64), int8] */;
    %1065 = contrib.axelera.mvm(%1063, %1064) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1066 = contrib.axelera.iau_reduce(%1065, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1067 = contrib.axelera.dpu_cast_float32(%1066) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1068 = contrib.axelera.dpu_elementwise(%1067, meta[relay.Constant][327] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1069 = contrib.axelera.dpu_elementwise(%1062, meta[relay.Constant][325] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1070 = contrib.axelera.dpu_elementwise(%1068, meta[relay.Constant][328] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1071 = contrib.axelera.dpu_elementwise(%1069, %1070, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1072 = cast(%1071, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1072, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8], Tensor[(20, 20, 4, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %1167 = %1166(%1164, %1165) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %1168 = fn (%OutlineComposites_479_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_479") -> Tensor[(20, 20, 8, 64), int8] {
    %1053 = contrib.axelera.ifd(%OutlineComposites_479_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %1054 = contrib.axelera.ifdw(meta[relay.Constant][322] /* ty=Tensor[(8, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(8, 8, 1, 1, 64, 64), int8] */;
    %1055 = contrib.axelera.mvm(%1053, %1054) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1056 = contrib.axelera.iau_reduce(%1055, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int32] */;
    %1057 = contrib.axelera.dpu_cast_float32(%1056) /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1058 = contrib.axelera.dpu_elementwise(%1057, meta[relay.Constant][323] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1059 = contrib.axelera.dpu_elementwise(%1058, meta[relay.Constant][324] /* ty=Tensor[(1, 1, 8, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 8, 1, 1, 64), float32] */;
    %1060 = cast(%1059, dtype="int8") /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1060, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 8, 64), int8] */;
  %1169 = %1168(%1167) /* ty=Tensor[(20, 20, 8, 64), int8] */;
  %1170 = fn (%OutlineComposites_483_i0: Tensor[(20, 20, 8, 64), int8] /* ty=Tensor[(20, 20, 8, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_483") -> Tensor[(20, 20, 4, 64), int8] {
    %1045 = contrib.axelera.ifd(%OutlineComposites_483_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 8, 1, 1, 64), int8] */;
    %1046 = contrib.axelera.ifdw(meta[relay.Constant][319] /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 8, 1, 1, 64, 64), int8] */;
    %1047 = contrib.axelera.mvm(%1045, %1046) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1048 = contrib.axelera.iau_reduce(%1047, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(20, 20, 4, 1, 1, 64), int32] */;
    %1049 = contrib.axelera.dpu_cast_float32(%1048) /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1050 = contrib.axelera.dpu_elementwise(%1049, meta[relay.Constant][320] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1051 = contrib.axelera.dpu_elementwise(%1050, meta[relay.Constant][321] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(20, 20, 4, 1, 1, 64), float32] */;
    %1052 = cast(%1051, dtype="int8") /* ty=Tensor[(20, 20, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1052, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(20, 20, 4, 64), int8] */
  } /* ty=fn (Tensor[(20, 20, 8, 64), int8]) -> Tensor[(20, 20, 4, 64), int8] */;
  %1179 = fn (%OutlineComposites_487_i0: Tensor[(80, 80, 2, 64), int8] /* ty=Tensor[(80, 80, 2, 64), int8] */, Compiler="OutlineComposites", Primitive=1, Inline=1, global_symbol="tvmgen_default_OutlineComposites_tvmgen_aipu_main_0_487") -> Tensor[(80, 80, 4, 64), int8] {
    %1171 = contrib.axelera.ifd(%OutlineComposites_487_i0, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 2, 1, 1, 64), int8] */;
    %1172 = contrib.axelera.ifdw(meta[relay.Constant][356] /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */) /* ty=Tensor[(4, 2, 1, 1, 64, 64), int8] */;
    %1173 = contrib.axelera.mvm(%1171, %1172) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int32] */;
    %1174 = contrib.axelera.iau_reduce(%1173, operation="ADD", reduction_dims=[3, 4]) /* ty=Tensor[(80, 80, 4, 1, 1, 64), int32] */;
    %1175 = contrib.axelera.dpu_cast_float32(%1174) /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %1176 = contrib.axelera.dpu_elementwise(%1175, meta[relay.Constant][357] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="MUL") /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %1177 = contrib.axelera.dpu_elementwise(%1176, meta[relay.Constant][358] /* ty=Tensor[(1, 1, 4, 1, 1, 64), float32] */, operation="ADD") /* ty=Tensor[(80, 80, 4, 1, 1, 64), float32] */;
    %1178 = cast(%1177, dtype="int8") /* ty=Tensor[(80, 80, 4, 1, 1, 64), int8] */;
    contrib.axelera.odr(%1178, window_hw=[1, 1], strides=[1, 1], dilations=[1, 1], before_pad_drop=[0, 0, 0], after_pad_drop=[0, 0, 0], padding_value=0) /* ty=Tensor[(80, 80, 4, 64), int8] */
  } /* ty=fn (Tensor[(80, 80, 2, 64), int8]) -> Tensor[(80, 80, 4, 64), int8] */;
  %1180 = %1044(%1043) /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %1181 = %1170(%1169) /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %1182 = %1179(%1006) /* ty=Tensor[(80, 80, 4, 64), int8] */;
  (%1180, %1181, %1182) /* ty=(Tensor[(40, 40, 4, 64), int8], Tensor[(20, 20, 4, 64), int8], Tensor[(80, 80, 4, 64), int8]) */
}

def @tvmgen_default_tvmgen_main(%axelera_new_0_i0: Tensor[(1, 320, 320, 64), int8] /* ty=Tensor[(1, 320, 320, 64), int8] */, Compiler="axelera", global_symbol="tvmgen_default_tvmgen_main") -> (Tensor[(1, 40, 40, 256), int8], Tensor[(1, 20, 20, 256), int8], Tensor[(1, 80, 80, 256), int8]) {
  %1183 = reshape(%axelera_new_0_i0, newshape=[-3, 0, -1, 64]) /* ty=Tensor[(320, 320, 1, 64), int8] */;
  %1184 = @tvmgen_default_tvmgen_aipu_main_0(%1183) /* ty=(Tensor[(40, 40, 4, 64), int8], Tensor[(20, 20, 4, 64), int8], Tensor[(80, 80, 4, 64), int8]) */;
  %1185 = %1184.0 /* ty=Tensor[(40, 40, 4, 64), int8] */;
  %1186 = %1184.1 /* ty=Tensor[(20, 20, 4, 64), int8] */;
  %1187 = %1184.2 /* ty=Tensor[(80, 80, 4, 64), int8] */;
  %1188 = reshape(%1185, newshape=[-4, 1, -1, 0, -3]) /* ty=Tensor[(1, 40, 40, 256), int8] */;
  %1189 = reshape(%1186, newshape=[-4, 1, -1, 0, -3]) /* ty=Tensor[(1, 20, 20, 256), int8] */;
  %1190 = reshape(%1187, newshape=[-4, 1, -1, 0, -3]) /* ty=Tensor[(1, 80, 80, 256), int8] */;
  (%1188, %1189, %1190) /* ty=(Tensor[(1, 40, 40, 256), int8], Tensor[(1, 20, 20, 256), int8], Tensor[(1, 80, 80, 256), int8]) */
}

